<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023年408算法题预测 环形链表</title>
    <url>/posts/b5fa7dc6.html</url>
    <content><![CDATA[<h3 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h3><p><img data-src="https://telegraph-image.pages.dev/file/9de5a4fc0567b418621f3.png"></p>
<p>获取题源请点击<a href="https://leetcode.cn/problems/linked-list-cycle/">https://leetcode.cn/problems/linked-list-cycle/</a></p>
<span id="more"></span>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>请参见力扣题解区</p>
<h3 id="题目答案"><a href="#题目答案" class="headerlink" title="题目答案"></a>题目答案</h3><h4 id="手写版"><a href="#手写版" class="headerlink" title="手写版"></a>手写版</h4><p><img data-src="https://telegraph-image.pages.dev/file/d1a85e76b612429e87c3d.jpg"></p>
<p>其他答案请参见力扣题解区</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年408算法题预测 反转链表</title>
    <url>/posts/7297737e.html</url>
    <content><![CDATA[<h3 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h3><p><img data-src="https://telegraph-image.pages.dev/file/5f67de051bc15cf90a23d.png"></p>
<span id="more"></span>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img data-src="https://telegraph-image.pages.dev/file/50a776383823725dd0078.png"></p>
<h3 id="题目答案"><a href="#题目答案" class="headerlink" title="题目答案"></a>题目答案</h3><h4 id="手写版（略微修改）"><a href="#手写版（略微修改）" class="headerlink" title="手写版（略微修改）"></a>手写版（略微修改）</h4><p>若无法显示，请点击<a href="https://telegraph-image.pages.dev/file/49854306da8b17e3bc502.png">https://telegraph-image.pages.dev/file/49854306da8b17e3bc502.png</a></p>
<p><img data-src="https://telegraph-image.pages.dev/file/49854306da8b17e3bc502.png"></p>
<h4 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseLinkedList</span><span class="params">(<span class="keyword">struct</span> ListNode *head)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">prev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">curr</span> =</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span> =</span> curr-&gt;next;</span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseBetween</span><span class="params">(<span class="keyword">struct</span> ListNode *head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步：哨兵列队</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p1</span> =</span> head;</span><br><span class="line">    <span class="comment">// 从 head 走 left - 1 步，来到 p1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从 p1 走 1 步，来到 p2 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p2</span> =</span> p1-&gt;next;</span><br><span class="line">    <span class="comment">// 从 p2 走 right - left 步，来到 p3</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p3</span> =</span> p2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; right - left; i++) &#123;</span><br><span class="line">        p3 = p3-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从 p3 走 1 步，来到 p4 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p4</span> =</span> p3-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：切断链接，分成三段链表</span></span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p3-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：反转中间段链表</span></span><br><span class="line">    reverseLinkedList(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第四步：重新拼接三段链表</span></span><br><span class="line">    p1-&gt;next = p3;</span><br><span class="line">    p2-&gt;next = p4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.zhihu.com/people/suixinyuan1990">千葉原</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年408算法题预测-链表之插入排序</title>
    <url>/posts/76850f28.html</url>
    <content><![CDATA[<h3 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h3><p><img data-src="https://telegraph-image.pages.dev/file/c7e4e4ca7567fb38f427a.png"></p>
<p>获取题源请点击<a href="https://leetcode.cn/problems/insertion-sort-list/description/?languageTags=c">https://leetcode.cn/problems/insertion-sort-list/description/?languageTags=c</a></p>
<span id="more"></span>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>插入排序</strong> 利用直接插入排序的算法思想，单链表无法向前遍历，需要通过三个指针完成操作。</p>
<ul>
<li>时间复杂度：O(n²)，n为链表长度。</li>
<li>空间复杂度：O(1)。</li>
</ul>
<h4 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h4><p>感谢LeetCode用户<a href="https://leetcode.cn/u/condescending-jangbuv/">꧁MxQuan.꧂</a>提供的思路。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">insertionSortList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)                                                        <span class="comment">//链表为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">L</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode)); <span class="comment">//辅助结点</span></span><br><span class="line">    L-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> head-&gt;next, *pre = head, *tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;                                                     <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val &gt;= pre-&gt;val)&#123;                                           <span class="comment">//寻找需要向前插入的结点</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tmp = L;</span><br><span class="line">            <span class="keyword">while</span>(tmp-&gt;next-&gt;val &lt; cur-&gt;val)                                <span class="comment">//寻找插入位置</span></span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;                                          <span class="comment">//进行插入</span></span><br><span class="line">            cur-&gt;next = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="题目答案"><a href="#题目答案" class="headerlink" title="题目答案"></a>题目答案</h3><p>特别地，由于408考试所用链表大多数为带头结点的链表，且结点结构不一致，因此最后写出的代码略有不同，但思路一致。</p>
<h4 id="手写版"><a href="#手写版" class="headerlink" title="手写版"></a>手写版</h4><p><img data-src="https://telegraph-image.pages.dev/file/02ad05c6a47e84350bbf4.jpg"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX学习笔记</title>
    <url>/posts/39976347.html</url>
    <content><![CDATA[<h2 id="传统请求及缺点"><a href="#传统请求及缺点" class="headerlink" title="传统请求及缺点"></a>传统请求及缺点</h2><ul>
<li>传统的请求都有哪些？<ul>
<li>直接在浏览器地址栏上输入URL。</li>
<li>点击超链接</li>
<li>提交form表单</li>
<li>使用JS代码发送请求<ul>
<li>window.open(url)</li>
<li>document.location.href &#x3D; url</li>
<li>window.location.href &#x3D; url</li>
<li>….</li>
</ul>
</li>
</ul>
</li>
<li>传统请求存在的问题<ul>
<li>页面全部刷新导致了用户的体验较差。</li>
<li>传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><ul>
<li>AJAX不能称为一种技术，它是多种技术的综合产物。</li>
<li>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</li>
<li>什么是异步，什么是同步？<ul>
<li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li>
<li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li>
<li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li>
</ul>
</li>
<li>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</li>
<li>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</li>
<li>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</li>
<li>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</li>
</ul>
<h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul>
<li><p>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</p>
</li>
<li><p>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</p>
</li>
<li><p>创建XMLHttpRequest对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>XMLHttpRequest对象的方法</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abort()</td>
<td align="left">取消当前请求</td>
</tr>
<tr>
<td align="left">getAllResponseHeaders()</td>
<td align="left">返回头部信息</td>
</tr>
<tr>
<td align="left">getResponseHeader()</td>
<td align="left">返回特定的头部信息</td>
</tr>
<tr>
<td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td>
<td align="left">规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码</td>
</tr>
<tr>
<td align="left">send()</td>
<td align="left">将请求发送到服务器，用于 GET 请求</td>
</tr>
<tr>
<td align="left">send(<em>string</em>)</td>
<td align="left">将请求发送到服务器，用于 POST 请求</td>
</tr>
<tr>
<td align="left">setRequestHeader()</td>
<td align="left">向要发送的报头添加标签&#x2F;值对</td>
</tr>
</tbody></table>
<ul>
<li>XMLHttpRequest对象的属性</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onreadystatechange</td>
<td align="left">定义当 readyState 属性发生变化时被调用的函数</td>
</tr>
<tr>
<td align="left">readyState</td>
<td align="left">保存 XMLHttpRequest 的状态。0：请求未初始化     1：服务器连接已建立     2：请求已收到    3：正在处理请求    4：请求已完成且响应已就绪</td>
</tr>
<tr>
<td align="left">responseText</td>
<td align="left">以字符串返回响应数据</td>
</tr>
<tr>
<td align="left">responseXML</td>
<td align="left">以 XML 数据返回响应数据</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”</td>
</tr>
<tr>
<td align="left">statusText</td>
<td align="left">返回状态文本（比如 “OK” 或 “Not Found”）</td>
</tr>
</tbody></table>
<h2 id="AJAX-GET请求"><a href="#AJAX-GET请求" class="headerlink" title="AJAX GET请求"></a>AJAX GET请求</h2><ul>
<li><p>发送AJAX get请求，前端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1. 创建AJAX核心对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2. 注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mydiv&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">responseText</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3. 开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest2&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4. 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;myspan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发送AJAX get请求，后端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest2Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取响应流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>AJAX get请求如何提交数据呢？</p>
<ul>
<li><p>get请求提交数据是在“请求行”上提交，格式是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">url?name=value&amp;name=value&amp;name=value....</span><br></pre></td></tr></table></figure>
</li>
<li><p>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</p>
</li>
</ul>
</li>
</ul>
<h2 id="AJAX-GET请求的缓存问题"><a href="#AJAX-GET请求的缓存问题" class="headerlink" title="AJAX GET请求的缓存问题"></a>AJAX GET请求的缓存问题</h2><ul>
<li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li>
<li>什么是AJAX GET请求缓存问题呢？<ul>
<li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li>
<li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li>
</ul>
</li>
<li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li>
<li>GET请求缓存的优缺点：<ul>
<li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li>
<li>缺点：无法实时获取最新的服务器资源。</li>
</ul>
</li>
<li>浏览器什么时候会走缓存？<ul>
<li>第一：是一个GET请求</li>
<li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li>
</ul>
</li>
<li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul>
<li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li>
<li>可以采用时间戳：”url?t&#x3D;” + new Date().getTime()</li>
<li>或者可以通过随机数：”url?t&#x3D;” + Math.random()</li>
<li>也可以随机数+时间戳….</li>
</ul>
</li>
</ul>
<h2 id="AJAX-POST请求"><a href="#AJAX-POST请求" class="headerlink" title="AJAX POST请求"></a>AJAX POST请求</h2><ul>
<li><p>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 发送AJAX POST请求</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">// 设置请求头的内容类型。模拟form表单提交数据。</span></span><br><span class="line"><span class="comment">// 获取表单中的数据</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="comment">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现一个案例：使用AJAX POST请求实现用户注册的时候，用户名是否可用。（验证用户名是否可以注册）实现步骤如下：</p>
<ul>
<li>在前端，用户输入用户名之后，失去焦点事件blur发生，然后发送AJAX POST请求，提交用户名</li>
<li>在后端，接收到用户名，连接数据库，根据用户名去表中搜索</li>
<li>如果用户名已存在<ul>
<li>后端响应消息：对不起，用户名已存在（在前端页面以红色字体展示）</li>
</ul>
</li>
<li>如果用户名不存在<ul>
<li>后端响应消息：用户名可以使用（在前端页面以绿色字体展示）</li>
</ul>
</li>
</ul>
</li>
<li><p>实现一个案例：用户点击按钮之后，发送AJAX请求，显示学生列表。</p>
<ul>
<li>在后端java程序中拼接HTML代码，然后将HTML代码直接响应到浏览器客户端。这种方式不好，不应该在java代码中编写HTML代码，能否在java程序中直接向前端响应数据？可以，可以在后端拼接JSON格式的字符串，或者XML格式的字符串，将这个字符串发送给前端，前端解析即可。</li>
</ul>
</li>
</ul>
<h2 id="基于JSON的数据交换"><a href="#基于JSON的数据交换" class="headerlink" title="基于JSON的数据交换"></a>基于JSON的数据交换</h2><ul>
<li><p>在WEB前端中，如何将一个json格式的字符串转换成json对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">username</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">password</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在后端拼接JSON格式的字符串，响应给前端的浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">json.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 获取每个学生的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 拼接json格式的字符串</span></span><br><span class="line">    <span class="comment">// &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line">    json.append(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;,\&quot;age\&quot;:&quot;</span>);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(<span class="string">&quot;,\&quot;addr\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(<span class="number">0</span>, json.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age, addr);</span><br><span class="line">    <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br></pre></td></tr></table></figure>

<p>注意：使用fastjson需要引入fastjson-1.2.2.jar</p>
</li>
</ul>
<h2 id="基于XML的数据交换"><a href="#基于XML的数据交换" class="headerlink" title="基于XML的数据交换"></a>基于XML的数据交换</h2><ul>
<li><p>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>xml和JSON都是常用的数据交换格式</p>
<ul>
<li>XML体积大，解析麻烦。较少用。</li>
<li>JSON体积小，解析简单，较常用。</li>
</ul>
</li>
<li><p>基于XML的数据交换，前端代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> xmlDoc = <span class="variable language_">this</span>.<span class="property">responseXML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> students = xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> nameOrAge = student.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stutbody&quot;</span>).<span class="property">innerHTML</span> = html</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>基于XML的数据交换，后端java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AJAX乱码问题"><a href="#AJAX乱码问题" class="headerlink" title="AJAX乱码问题"></a>AJAX乱码问题</h2><ul>
<li><p>测试内容：</p>
<ul>
<li>发送ajax get请求<ul>
<li>发送数据到服务器，服务器获取的数据是否乱码？</li>
<li>服务器响应给前端的中文，会不会乱码？</li>
</ul>
</li>
<li>发送ajax post请求<ul>
<li>发送数据到服务器，服务器获取的数据是否乱码？</li>
<li>服务器响应给前端的中文，会不会乱码？</li>
</ul>
</li>
</ul>
</li>
<li><p>包括还要测试tomcat服务器的版本：</p>
<ul>
<li>tomcat10和tomcat9都要进行测试。</li>
</ul>
</li>
<li><p>测试结果：</p>
<ul>
<li><p>对于tomcat10来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</p>
</li>
<li><p>对于tomcat9来说呢？</p>
<ul>
<li><p>响应中文的时候，会出现乱码，怎么解决？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AJAX的异步与同步"><a href="#AJAX的异步与同步" class="headerlink" title="AJAX的异步与同步"></a>AJAX的异步与同步</h2><ul>
<li><p>什么是异步？什么是同步？</p>
<ul>
<li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li>
<li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li>
</ul>
</li>
<li><p>异步和同步在代码上如何实现？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）</p>
<ul>
<li>举一个例子<ul>
<li>用户注册<ul>
<li>用户名需要发送ajax请求进行校验</li>
<li>邮箱地址也需要发送ajax请求校验</li>
<li>其他的也可能需要发送ajax请求。。。</li>
<li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li>
<li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AJAX代码封装"><a href="#AJAX代码封装" class="headerlink" title="AJAX代码封装"></a>AJAX代码封装</h2><ul>
<li><p>AJAX请求相关的代码都是类似的，有很多重复的代码，这些重复的代码能不能不写，能不能封装一个工具类。要发送ajax请求的话，就直接调用这个工具类中的相关函数即可。</p>
</li>
<li><p>接下来，手动封装一个工具类，这个工具类我们可以把它看做是一个JS的库。我们把这个JS库起一个名字，叫做jQuery。（我这里封装的jQuery只是一个前端的库，和后端的java没有关系，只是为了方便web前端代码的编写，提高WEB前端的开发效率）</p>
</li>
<li><p>手动开发jQuery，源代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = <span class="keyword">function</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">        domObj.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">click</span> = <span class="keyword">function</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onclick</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focus</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onfocus</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blur</span> = <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        domObj.<span class="property">onblur</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onchange</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.<span class="property">value</span> = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params">jsonArgs</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.<span class="title function_">success</span>(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, jsonArgs.<span class="property">url</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(jsonArgs.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, jsonArgs.<span class="property">url</span> + <span class="string">&quot;?&quot;</span> + jsonArgs.<span class="property">data</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以上库，怎么用？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                data : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                success : <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(json.<span class="property">uname</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AJAX跨域问题"><a href="#AJAX跨域问题" class="headerlink" title="AJAX跨域问题"></a>AJAX跨域问题</h2><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ul>
<li>跨域是指从一个域名的网页去请求另一个域名的资源。比如从百度(<a href="https://baidu.com)页面去请求京东(https//www.jd.com)%E7%9A%84%E8%B5%84%E6%BA%90%E3%80%82">https://baidu.com)页面去请求京东(https://www.jd.com)的资源。</a></li>
<li>通过超链接或者form表单提交或者window.location.href的方式进行跨域是不存在问题的（<strong>大家可以编写程序测试一下</strong>）。但在一个域名的网页中的一段js代码发送ajax请求去访问另一个域名中的资源，由于同源策略的存在导致无法跨域访问，那么ajax就存在这种跨域问题。</li>
<li>同源策略是指一段脚本只能读取来自同一来源的窗口和文档的属性，同源就是协议、域名和端口都相同。</li>
<li>同源策略有什么用？如果你刚刚在网银输入账号密码，查看了自己还有1万块钱，紧接着访问一些不规矩的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。所以，从安全的角度来讲，同源策略是有利于保护网站信息的。</li>
<li>有一些情况下，我们是需要使用ajax进行跨域访问的。比如某公司的A页面(a.bjpowernode.com)有可能需要获取B页面(b.bjpowernode.com)。</li>
</ul>
<h3 id="同源还是不同源"><a href="#同源还是不同源" class="headerlink" title="同源还是不同源"></a>同源还是不同源</h3><ul>
<li><p>区分同源和不同源的三要素</p>
</li>
<li><ul>
<li>协议</li>
<li>域名</li>
<li>端口</li>
</ul>
</li>
<li><p>协议一致，域名一致，端口号一致，三个要素都一致，才是同源，其它一律都是不同源</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>URL1</strong></th>
<th><strong>URL2</strong></th>
<th><strong>是否同源</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td>
<td><a href="http://localhost:8080/a/first">http://localhost:8080/a/first</a></td>
<td>同源</td>
<td>协议 域名 端口一致</td>
</tr>
<tr>
<td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td>
<td><a href="http://localhost:8080/b/first">http://localhost:8080/b/first</a></td>
<td>同源</td>
<td>协议 域名 端口一致</td>
</tr>
<tr>
<td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td>
<td><a href="https://www.myweb.com:8080/b.js">https://www.myweb.com:8080/b.js</a></td>
<td>不同源</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td>
<td><a href="http://www.myweb.com:8081/b.js">http://www.myweb.com:8081/b.js</a></td>
<td>不同源</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td>
<td><a href="http://www.myweb2.com/b.js">http://www.myweb2.com/b.js</a></td>
<td>不同源</td>
<td>域名不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td>
<td><a href="http://crm.myweb.com/b.js">http://crm.myweb.com/b.js</a></td>
<td>不同源</td>
<td>子域名不同</td>
</tr>
</tbody></table>
<h3 id="复现AJAX跨域问题"><a href="#复现AJAX跨域问题" class="headerlink" title="复现AJAX跨域问题"></a>复现AJAX跨域问题</h3><h3 id="AJAX跨域解决方案"><a href="#AJAX跨域解决方案" class="headerlink" title="AJAX跨域解决方案"></a>AJAX跨域解决方案</h3><h4 id="方案1：设置响应头"><a href="#方案1：设置响应头" class="headerlink" title="方案1：设置响应头"></a>方案1：设置响应头</h4><ul>
<li><p>核心原理：跨域访问的资源允许你跨域访问。</p>
</li>
<li><p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>); <span class="comment">// 允许某个</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 允许所有</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方案2：jsonp"><a href="#方案2：jsonp" class="headerlink" title="方案2：jsonp"></a>方案2：jsonp</h4><ul>
<li>jsonp：json with padding（带填充的json【学完之后再理解这个什么意思！！！】）</li>
<li>jsonp不是一个真正的ajax请求。只不过可以完成ajax的局部刷新效果。可以说jsonp是一种类ajax请求的机制。</li>
<li>jsonp不是ajax请求，但是可以完成局部刷新的效果，并且可以解决跨域问题。</li>
<li>注意：jsonp解决跨域的时候，只支持GET请求。不支持post请求。</li>
</ul>
<h4 id="方案3：jQuery封装的jsonp"><a href="#方案3：jQuery封装的jsonp" class="headerlink" title="方案3：jQuery封装的jsonp"></a>方案3：jQuery封装的jsonp</h4><ul>
<li><p>牛人们写的jQuery库，已经对jsonp进行了封装。大家可以直接拿来用。</p>
</li>
<li><p>用之前需要引入jQuery库的js文件。（这里的jQuery库咱们就不再封装了，咱们直接用jQuery写好的jsonp方式。）</p>
</li>
<li><p>jQuery中的jsonp其实就是我们方案2的高度封装，底层原理完全相同。</p>
</li>
<li><p>核心代码</p>
<ul>
<li><pre><code class="language-javascript">$.ajax(&#123;
    type : &quot;GET&quot;,
    url : &quot;跨域的url&quot;,
    dataType : &quot;jsonp&quot;, // 指定数据类型
    jsonp : &quot;fun&quot;, // 指定参数名（不设置的时候，默认是：&quot;callback&quot;）
    jsonpCallback : &quot;sayHello&quot; // 指定回调函数的名字
                               // （不设置的时候，jQuery会自动生成一个随机的回调函数，
                               //并且这个回调函数还会自动调用success的回调函数。）
&#125;)
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="方案4：代理机制（httpclient）"><a href="#方案4：代理机制（httpclient）" class="headerlink" title="方案4：代理机制（httpclient）"></a>方案4：代理机制（httpclient）</h4><ul>
<li>使用Java程序怎么去发送get&#x2F;post请求呢？【GET和POST请求就是HTTP请求。】<ul>
<li>第一种方案：使用JDK内置的API（java.net.URL…..），这些API是可以发送HTTP请求的。</li>
<li>第二种方案：使用第三方的开源组件，比如：apache的httpclient组件。（httpclient组件是开源免费的，可以直接用）</li>
</ul>
</li>
<li>在java程序中，使用httpclient组件可以发送http请求。<ul>
<li>对于httpclient组件的代码，大家目前可以不进行深入的研究，可以从网上直接搜。然后粘贴过来，改一改，看看能不能完成发送get和post请求。</li>
<li>使用httpclient组件，需要先将这个组件相关的jar包引入到项目当中。</li>
</ul>
</li>
</ul>
<h4 id="方案5：nginx反向代理"><a href="#方案5：nginx反向代理" class="headerlink" title="方案5：nginx反向代理"></a>方案5：nginx反向代理</h4><ul>
<li>nginx反向代理中也是使用了这种代理机制来完成AJAX的跨域，实现起来非常简单，只要修改一个nginx的配置即可。以后大家学习nginx之后再说吧。！！！！</li>
</ul>
<h2 id="AJAX实现搜索联想-自动补全"><a href="#AJAX实现搜索联想-自动补全" class="headerlink" title="AJAX实现搜索联想 自动补全"></a>AJAX实现搜索联想 自动补全</h2><ul>
<li>什么是搜索联想？自动补全？<ul>
<li>百度是一个很典型的代表。在百度的搜索框中输入相关信息的时候，会有搜索联想以及自动补全。</li>
<li>搜索联想和自动补全：实际上是为了方便用户的使用。让用户的体验更好。</li>
<li>搜索联想：当用户输入一些单词之后，自动联想出用户要搜索的信息，给一个提示。</li>
<li>自动补全：当联想出一些内容之后，用户点击某个联想的单词，然后将这个单词自动补全到搜索框当中。</li>
<li>搜索联想和自动补全功能，因为是页面局部刷新效果，所以需要使用ajax请求来完成。</li>
</ul>
</li>
<li>搜索联想，自动补全功能的核心实现原理？<ul>
<li>当键盘事件发生之后，比如：keyup：键弹起事件。</li>
<li>发送ajax请求，请求中提交用户输入的搜索内容，例如：北京（发送ajax请求，携带“北京”两个字）</li>
<li>后端接收到ajax请求，接收到“北京”两个字，执行select语句进行模糊查询。返回查询结果。</li>
<li>将查询结果封装成json格式的字符串，将json格式的字符串响应到前端。</li>
<li>前端接收到json格式的字符串之后，解析这个json字符串，动态展示页面。</li>
</ul>
</li>
</ul>
<h2 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h2><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100 Continue</td>
<td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td>
</tr>
<tr>
<td align="left">101 Switching Protocols</td>
<td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>
</tr>
</tbody></table>
<h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200 OK</td>
<td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td>
</tr>
<tr>
<td align="left">201 Created</td>
<td align="left">请求被创建完成，同时新的资源被创建。</td>
</tr>
<tr>
<td align="left">202 Accepted</td>
<td align="left">供处理的请求已被接受，但是处理未完成。</td>
</tr>
<tr>
<td align="left">203 Non-authoritative Information</td>
<td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td>
</tr>
<tr>
<td align="left">204 No Content</td>
<td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
</tr>
<tr>
<td align="left">205 Reset Content</td>
<td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>
</tr>
<tr>
<td align="left">206 Partial Content</td>
<td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td>
</tr>
</tbody></table>
<h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">300 Multiple Choices</td>
<td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>
</tr>
<tr>
<td align="left">301 Moved Permanently</td>
<td align="left">所请求的页面已经转移至新的url。</td>
</tr>
<tr>
<td align="left">302 Found</td>
<td align="left">所请求的页面已经临时转移至新的url。</td>
</tr>
<tr>
<td align="left">303 See Other</td>
<td align="left">所请求的页面可在别的url下被找到。</td>
</tr>
<tr>
<td align="left">304 Not Modified</td>
<td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>
</tr>
<tr>
<td align="left">305 Use Proxy</td>
<td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td>
</tr>
<tr>
<td align="left">306 <em>Unused</em></td>
<td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td>
</tr>
<tr>
<td align="left">307 Temporary Redirect</td>
<td align="left">被请求的页面已经临时移至新的url。</td>
</tr>
</tbody></table>
<h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">400 Bad Request</td>
<td align="left">服务器未能理解请求。</td>
</tr>
<tr>
<td align="left">401 Unauthorized</td>
<td align="left">被请求的页面需要用户名和密码。</td>
</tr>
<tr>
<td align="left">402 Payment Required</td>
<td align="left">此代码尚无法使用。</td>
</tr>
<tr>
<td align="left">403 Forbidden</td>
<td align="left">对被请求页面的访问被禁止。</td>
</tr>
<tr>
<td align="left">404 Not Found</td>
<td align="left">服务器无法找到被请求的页面。</td>
</tr>
<tr>
<td align="left">405 Method Not Allowed</td>
<td align="left">请求中指定的方法不被允许。</td>
</tr>
<tr>
<td align="left">406 Not Acceptable</td>
<td align="left">服务器生成的响应无法被客户端所接受。</td>
</tr>
<tr>
<td align="left">407 Proxy Authentication Required</td>
<td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>
</tr>
<tr>
<td align="left">408 Request Timeout</td>
<td align="left">请求超出了服务器的等待时间。</td>
</tr>
<tr>
<td align="left">409 Conflict</td>
<td align="left">由于冲突，请求无法被完成。</td>
</tr>
<tr>
<td align="left">410 Gone</td>
<td align="left">被请求的页面不可用。</td>
</tr>
<tr>
<td align="left">411 Length Required</td>
<td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">412 Precondition Failed</td>
<td align="left">请求中的前提条件被服务器评估为失败。</td>
</tr>
<tr>
<td align="left">413 Request Entity Too Large</td>
<td align="left">由于所请求的实体的太大，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">414 Request-url Too Long</td>
<td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td>
</tr>
<tr>
<td align="left">415 Unsupported Media Type</td>
<td align="left">由于媒介类型不被支持，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">服务器不能满足客户在请求中指定的Range头。</td>
</tr>
<tr>
<td align="left">417 Expectation Failed</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">500 Internal Server Error</td>
<td align="left">请求未完成。服务器遇到不可预知的情况。</td>
</tr>
<tr>
<td align="left">501 Not Implemented</td>
<td align="left">请求未完成。服务器不支持所请求的功能。</td>
</tr>
<tr>
<td align="left">502 Bad Gateway</td>
<td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td>
</tr>
<tr>
<td align="left">503 Service Unavailable</td>
<td align="left">请求未完成。服务器临时过载或当机。</td>
</tr>
<tr>
<td align="left">504 Gateway Timeout</td>
<td align="left">网关超时。</td>
</tr>
<tr>
<td align="left">505 HTTP Version Not Supported</td>
<td align="left">服务器不支持请求中指明的HTTP协议版本。</td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>笔记主体源自@<a href="https://space.bilibili.com/76542346">动力节点</a>，本人根据个人喜好进行了整理与修改，主要自用。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Chip testing</title>
    <url>/posts/8787df53.html</url>
    <content><![CDATA[<p>Professor Diogenes has <strong>n</strong> supposedly identical integrated-circuit chips that in principle are capable of testing each other. The professor’s test jig accomodates two chips at a time. When the jig is loaded, each chip tests the other and reports whether it is good or bad. A good chip always reports accurately whether the other chip is good or bad, but the professor cannot trust the answer of a bad chip. Thus, the four possible outcomes of a test are as follows:</p>
<table>
<thead>
<tr>
<th><strong>Chip A says</strong></th>
<th><strong>Chip B says</strong></th>
<th><strong>Conclusion</strong></th>
</tr>
</thead>
<tbody><tr>
<td>B is good</td>
<td>A is good</td>
<td>both are good, or both are bad</td>
</tr>
<tr>
<td>B is good</td>
<td>A is bad</td>
<td>at least one is bad</td>
</tr>
<tr>
<td>B is bad</td>
<td>A is good</td>
<td>at least one is bad</td>
</tr>
<tr>
<td>B is bad</td>
<td>A is bad</td>
<td>at least one is bad</td>
</tr>
</tbody></table>
<span id="more"></span>

<ol>
<li>Show that if more than <strong>n&#x2F;2</strong> chips are bad, the professor cannot necessarily determine which chips are good using any strategy based on this kind of pairwise test. Assume that the bad chips can conspire to fool the professor.</li>
<li>Consider the problem of finding a single good chip from among <strong>n</strong> chips, assuming that more than <strong>n&#x2F;2</strong> of the chips are good. Show that <strong>⌊n&#x2F;2⌋</strong> pairwise tests are sufficient to reduce the problem to one of nearly half the size.</li>
<li>Show that the good chips can be identified with <strong>Θ(n)</strong> pairwise tests, assuming that more than <strong>n&#x2F;2</strong> chips are good. Give and solve the recurrence that describes the number of tests.</li>
</ol>
<p><strong>If more than half are bad</strong></p>
<p>Lets say that there are <strong>g&lt;n&#x2F;2</strong> good chips. The same amount of the remaining bad chips can choose to act similar to good chips. That is, they can identify each other as good and all other as faulty. Since this is what the good chips would do, both groups are symmetric in regards to the operation of pairwise comparison. No strategy can distinguish between the two groups.</p>
<p><strong>Finding a single good chip in logarithmic time</strong></p>
<p>We split the chips in groups of two and compare them. We can take one of the chips if the outcome is the first one (both are good or both are bad) and but both away otherwise. When putting away, we’re removing at least one bad chip for every good one we remove. Out of the pairs we’ve chosen a chip from, there would be more good chips than bad chips (there would be more good pairs, because the good chips are more than the half). Now we have at most <strong>n&#x2F;2</strong> chips, where at least half of them are good.</p>
<p><strong>Finding the good chips</strong></p>
<p>The recurrence for finding at least one good chip is:<br>$$<br>T(n)&#x3D;T(n&#x2F;2)+n&#x2F;2<br>$$<br>By the master method, this is Θ(n). After we’ve found one, we can compare it will all others, which is a Θ(n) operation. And the total number of tests is:<br>$$<br>O(n)+n−1&#x3D;Θ(n).<br>$$<br><strong>Python code</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodChip</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">good</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> other.good()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BadChip</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">good</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="literal">True</span>, <span class="literal">False</span>][random.randint(<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jig</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> [a.check(b), b.check(a)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diogenes</span>(<span class="params">chips, verbose = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_single</span>(<span class="params">chips</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(chips) &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> chips[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            halfpoint = <span class="built_in">len</span>(chips) // <span class="number">2</span></span><br><span class="line">            pairs     = <span class="built_in">zip</span>(chips[<span class="number">0</span>:halfpoint], chips[halfpoint:halfpoint * <span class="number">2</span>])</span><br><span class="line">            kept      = [a <span class="keyword">for</span> (a, b) <span class="keyword">in</span> pairs <span class="keyword">if</span> jig(a, b) == [<span class="literal">True</span>, <span class="literal">True</span>]]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>CLRS</tag>
      </tags>
  </entry>
  <entry>
    <title>Clone与Deploy等操作后，出现OpenSSL SSL_read Connection was reset, errno 10054的问题</title>
    <url>/posts/175c8d74.html</url>
    <content><![CDATA[<p>首先检查<a href="http://github.com/settings/keys">github.com&#x2F;settings&#x2F;keys</a>中是否有SSH Key，若没有则进行以下的操作，若有可以忽略第一、二步。</p>
<p>（1）新建 SSH key，在git shell(或者git bash等命令窗口)，注意大小写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;useremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>useremail指的是你的Github账户的邮箱地址。如果你的对应的Github项目在创建时没有设置密码，你可以在输入命令后无视提示，一路回车。否则你需要在</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Enter <span class="title">passphrase</span> <span class="params">(empty <span class="keyword">for</span> no passphrase)</span>:</span></span><br><span class="line"><span class="function">Enter same passphrase again:</span></span><br></pre></td></tr></table></figure>

<p>出现时输入你设置的密码。</p>
<span id="more"></span>

<p>（2）打开id_rsa.pub文件，这个文件即刚刚你新建的 SSH key （一般位于C盘用户文件夹的.ssh文件夹内），用记事本打开它然后全选复制。</p>
<p>之后在<a href="http://github.com/settings/keys">github.com&#x2F;settings&#x2F;keys</a> 中 New SSH key，title可留空也可任意填写，将刚刚复制的内容粘贴在key文本框内,点击确定。</p>
<p>（3）输入命令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>来检测 SSH key 是否配置成功，期间可能会有提示你输入yes或no的提示，直接输入yes一路回车即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi username! You&#x27;ve successfully authenticated, but GitHub does not </span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure>

<p>出现这个就代表成功啦。</p>
<p>（4）接下来在命令窗口输入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email  <span class="string">&quot;useremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>username是Github项目对应的用户名，useremail就是对应的邮箱地址。</p>
<p>（5）至此 SSH key的配置结束，如果还是出现了原来的问题可以在出现错误后输入下面这个命令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>

<p>另外如果使用了Clash、ShadowsocksR等代理软件，请务必先将这类工具关闭。</p>
<p>针对网络不畅引起的这个问题，可以安装<a href="https://gitee.com/docmirror/dev-sidecar">DevSidecar</a>使用Git.exe代理。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化记录</title>
    <url>/posts/916f4a50.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Hexo 5.4.0，NexT 8.14.1</p>
<h1 id="Highlight-js高亮问题"><a href="#Highlight-js高亮问题" class="headerlink" title="Highlight.js高亮问题"></a>Highlight.js高亮问题</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">highlight<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  auto_detect<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  line_number<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  tab_replace<span class="punctuation">:</span> &#x27;  &#x27;</span><br><span class="line">  wrap<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  hljs<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">prismjs<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<p>启用Highlight.js后，代码块高亮效果无效。</p>
<span id="more"></span>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>法1：<del>改用prismjs</del></li>
<li>法2：改用csr渲染，在模板文件<code>hexo-theme-next\layout\_layout.njk</code>中插入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;//cdn.bootcss.com/highlight.js/9.2.0/styles/github.min.css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/highlight.js/9.2.0/highlight.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>hljs.initHighlightingOnLoad();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>这种方法在使用了Pjax特性后并不好用，需要手动刷新才能生效，可以考虑在<code>&lt;script&gt;</code>标签中添加<code>data-pjax=&quot;&quot; async=&quot;&quot;</code>属性，但是有时会失效，目前没有找到完美的解决方案。</p>
</div>

<ul>
<li><p>法3：Highlight.js自带的语法检测过于辣鸡，且十分耗费资源。故可以选择手动配置Markdown文件。在Markdown文件中，<strong>使用代码语言标记必须加空格</strong>，否则失效。</p>
<p>首先需要先将Highlight.js自带的语法检测关闭。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">highlight<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  auto_detect<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<p>然后使用[`&#96;&#96;][空格][语言标记]的格式进行标识。<del>过于愚蠢的匹配规则。</del></p>
</li>
</ul>
<h1 id="夜间模式优化"><a href="#夜间模式优化" class="headerlink" title="夜间模式优化"></a>夜间模式优化</h1><p>夜间模式基于<a href="https://github.com/sandoche/Darkmode.js">Darkmode.js</a>实现，目前已经有专用于NexT的插件<a href="https://github.com/rqh656418510/hexo-next-darkmode">hexo-next-darkmode</a>。其CSS样式文件位于<code>blog\node_modules\hexo-next-darkmode\lib</code></p>
<p>暗黑模式激活后，<code>hexo-next-darkmode</code> 插件会将 <code>darkmode--activated</code> CSS 类添加到 <code>body</code> 标签，可以利用它覆盖插件默认自带的 CSS 样式，这样就可以实现暗黑模式 CSS 样式的高度自定义。</p>
<div class="note warning"><p>以下内容在实现前均需要先安装并启用<code>hexo-next-darkmode</code>，或者自行引入<code>Darkmode.js</code>。</p>
</div>

<h2 id="Prism-js代码块优化"><a href="#Prism-js代码块优化" class="headerlink" title="Prism.js代码块优化"></a>Prism.js代码块优化</h2><h3 id="修改代码文字反白样式"><a href="#修改代码文字反白样式" class="headerlink" title="修改代码文字反白样式"></a>修改代码文字反白样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码块框颜色优化"><a href="#代码块框颜色优化" class="headerlink" title="代码块框颜色优化"></a>代码块框颜色优化</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.darkmode--activated</span> pre &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.75</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>**注意：**在当前Prism.js主题下，强行改变代码块框颜色会导致代码难以看清。因此选用改变透明度的折中方案，当然也可以选择其他Prism.js主题再进行样式修改。</p>
</div>

<h2 id="支持Waline的夜间模式"><a href="#支持Waline的夜间模式" class="headerlink" title="支持Waline的夜间模式"></a>支持Waline的夜间模式</h2><p><code>hexo-next-darkmode</code>现已兼容Waline的深色样式，修改NexT配置文件<code>hexo-theme-next\_config.yml</code>即可。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">waline<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  dark<span class="punctuation">:</span> &#x27;body.darkmode--activated&#x27;</span><br><span class="line">  ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义暗黑样式"><a href="#自定义暗黑样式" class="headerlink" title="自定义暗黑样式"></a>自定义暗黑样式</h3><p>在夜间模式下，Waline 客户端默认会使用以下样式，若希望自定义夜间模式的 CSS 样式，直接覆盖以下 CSS 样式即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根据用户设置 ↓ */</span></span><br><span class="line">darkmode-selector &#123;</span><br><span class="line">  <span class="comment">/* 常规颜色 */</span></span><br><span class="line">  <span class="attr">--waline-white</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attr">--waline-light-grey</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attr">--waline-dark-grey</span>: <span class="number">#999</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 布局颜色 */</span></span><br><span class="line">  <span class="attr">--waline-color</span>: <span class="number">#888</span>;</span><br><span class="line">  <span class="attr">--waline-bgcolor</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">  <span class="attr">--waline-bgcolor-light</span>: <span class="number">#272727</span>;</span><br><span class="line">  <span class="attr">--waline-border-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attr">--waline-disable-bgcolor</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attr">--waline-disable-color</span>: <span class="number">#272727</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 特殊颜色 */</span></span><br><span class="line">  <span class="attr">--waline-bq-color</span>: <span class="number">#272727</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 其他颜色 */</span></span><br><span class="line">  <span class="attr">--waline-info-bgcolor</span>: <span class="number">#272727</span>;</span><br><span class="line">  <span class="attr">--waline-info-color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更换资源CDN"><a href="#更换资源CDN" class="headerlink" title="更换资源CDN"></a>更换资源CDN</h1><p>在<code>jsDelivr</code>被吊销ICP许可证后，<code>cdn.jsdelivr.net</code>开始遭到污染，非魔法上网已经不能正常加载，其原因不做讨论。</p>
<h2 id="修改Next主题CDN"><a href="#修改Next主题CDN" class="headerlink" title="修改Next主题CDN"></a>修改Next主题CDN</h2><table>
<thead>
<tr>
<th>运营方</th>
<th>节点</th>
<th>地域</th>
<th>链接及格式</th>
<th>上游</th>
</tr>
</thead>
<tbody><tr>
<td>75CDN(360前端)</td>
<td>360自有节点</td>
<td>全球</td>
<td><a href="https://lib.baomitu.com/%7Bcdnjs%E6%A0%BC%E5%BC%8F%7D">https://lib.baomitu.com/{cdnjs格式}</a></td>
<td>cdnjs</td>
</tr>
<tr>
<td>知乎</td>
<td>阿里云</td>
<td>全球</td>
<td><a href="https://unpkg.zhimg.com/%7Bunpkg%E6%A0%BC%E5%BC%8F%7D">https://unpkg.zhimg.com/{unpkg格式}</a></td>
<td>unpkg</td>
</tr>
<tr>
<td>百度</td>
<td>百度云</td>
<td>全球</td>
<td><a href="https://code.bdstatic.com/npm/%7Bunpkg%E6%A0%BC%E5%BC%8F%7D">https://code.bdstatic.com/npm/{unpkg格式}</a></td>
<td>内建npm镜像（上游淘宝cmpnjs）</td>
</tr>
<tr>
<td>饿了么</td>
<td>阿里云</td>
<td>中国大陆</td>
<td><a href="https://npm.elemecdn.com/%7Bunpkg%E6%A0%BC%E5%BC%8F%7D">https://npm.elemecdn.com/{unpkg格式}</a></td>
<td>unpkg</td>
</tr>
</tbody></table>
<p>修改主题根目录下<code>_config.next.yml</code>，这里我采用了75CDN(360前端)，它已经维护很长时间，是最适合NexT的CDN。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># It&#x27;s recommended to use the same version as in `_vendors.yml` to avoid potential problems.</span><br><span class="line"># Remember to use the HTTPS protocol of CDN links when you enable HTTPS on your site.</span><br><span class="line">vendors<span class="punctuation">:</span></span><br><span class="line">  # The CDN provider of NexT internal scripts.</span><br><span class="line">  # Available values<span class="punctuation">:</span> local | jsdelivr | unpkg | cdnjs | custom</span><br><span class="line">  # Warning<span class="punctuation">:</span> If you are using the latest master branch of NexT<span class="punctuation">,</span> please set `internal<span class="punctuation">:</span> local`</span><br><span class="line">  internal<span class="punctuation">:</span> local</span><br><span class="line">  # The default CDN provider of third-party plugins.</span><br><span class="line">  # Available values<span class="punctuation">:</span> local | jsdelivr | unpkg | cdnjs | custom</span><br><span class="line">  # Dependencies for `plugins<span class="punctuation">:</span> local`<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//github.com/next-theme/plugins</span></span><br><span class="line">  plugins<span class="punctuation">:</span> custom</span><br><span class="line"></span><br><span class="line">  # Custom CDN URL</span><br><span class="line">  # For example<span class="punctuation">:</span></span><br><span class="line">  # custom_cdn_url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//cdn.jsdelivr.net/npm/$&#123;npm_name&#125;@$&#123;version&#125;/$&#123;minified&#125;</span></span><br><span class="line">  # custom_cdn_url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//cdnjs.cloudflare.com/ajax/libs/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span></span><br><span class="line">  # jsdelivr<span class="punctuation">:</span> `https<span class="punctuation">:</span><span class="comment">//cdn.jsdelivr.net/npm/$&#123;name&#125;@$&#123;version&#125;/$&#123;file&#125;`,</span></span><br><span class="line">  # unpkg <span class="punctuation">:</span> `https<span class="punctuation">:</span><span class="comment">//unpkg.com/$&#123;name&#125;@$&#123;version&#125;/$&#123;file&#125;`,</span></span><br><span class="line">  # cdnjs <span class="punctuation">:</span> `https<span class="punctuation">:</span><span class="comment">//cdnjs.cloudflare.com/ajax/libs/$&#123;alias || name&#125;/$&#123;version&#125;/$&#123;file.replace(/^(dist|lib|)\/(browser\/|)/, &#x27;&#x27;)&#125;`</span></span><br><span class="line">  custom_cdn_url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//lib.baomitu.com/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改谷歌字体库以加速页面加载"><a href="#修改谷歌字体库以加速页面加载" class="headerlink" title="修改谷歌字体库以加速页面加载"></a>修改谷歌字体库以加速页面加载</h2><p>修改主题根目录下<code>_config.next.yml</code>配置项</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">font<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host<span class="punctuation">,</span> e.g. https<span class="punctuation">:</span><span class="comment">//fonts.googleapis.com (Default).</span></span><br><span class="line">  host<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//fonts.geekzu.org</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="针对NexT8-11-0以后的特殊问题"><a href="#针对NexT8-11-0以后的特殊问题" class="headerlink" title="针对NexT8.11.0以后的特殊问题"></a>针对NexT8.11.0以后的特殊问题</h2><p>由于NexT自<code>8.11.0</code>以来加入了Pjax自动更新功能，其使用的Pjax版本更新至<code>0.6.0</code>。然而75CDN(360前端)资源库中没有<code>0.6.0</code>的Pjax，只有<code>0.5.0</code>的Pjax，这导致修改CDN后我们无法使用Pjax。</p>
<p>可通过修改主题根目录下<code>_vendors.yml</code>来强行改变Pjax引入的版本。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">pjax<span class="punctuation">:</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;@next-theme/pjax&#x27;</span><br><span class="line">  version<span class="punctuation">:</span> <span class="number">0.5</span><span class="number">.0</span></span><br><span class="line">  file<span class="punctuation">:</span> pjax.min.js</span><br><span class="line">  alias<span class="punctuation">:</span> next-theme-pjax</span><br><span class="line">  integrity<span class="punctuation">:</span> sha256<span class="number">-3</span>NkoLDrmHLTYj7csHIZSr0MHAFTXth7Ua/DDt4MRUAg=</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>必须保证<code>version</code>与<code>integrity</code>字段值完全如上所示，任何一个值出错都会导致Pjax无法引入。</p>
</div>

<h1 id="评论系统优化"><a href="#评论系统优化" class="headerlink" title="评论系统优化"></a>评论系统优化</h1><h2 id="服务端升级"><a href="#服务端升级" class="headerlink" title="服务端升级"></a>服务端升级</h2><p>在<a href="https://waline.js.org/">Waline官网</a>根据流程走即可。新建一个Github仓库，然后部署于Vercel。环境变量可使用旧版Waline的，这样可以无损保留评论数据。绑定域名建议新建，以防止翻车还得重新解析。</p>
<div class="note info"><p>也可以通过修改仓库中修改 <code>package.json</code> 文件中的 <code>@waline/vercel</code> 版本号为最新版本，再Redeploy。</p>
</div>

<h2 id="客户端升级"><a href="#客户端升级" class="headerlink" title="客户端升级"></a>客户端升级</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i @waline/next@latest</span></span><br></pre></td></tr></table></figure>

<p>客户端由<code>1.6.0</code>升级至<code>2.14.7</code></p>
<h2 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h2><p>Waline V2更新了配置文件格式，旧版的配置文件不再支持。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Waline Config File</span><br><span class="line"># For more information<span class="punctuation">:</span></span><br><span class="line"># - https<span class="punctuation">:</span><span class="comment">//waline.js.org</span></span><br><span class="line"># - https<span class="punctuation">:</span><span class="comment">//waline.js.org/reference/component.html</span></span><br><span class="line">waline<span class="punctuation">:</span></span><br><span class="line">  # New! Whether enable this plugin</span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  dark<span class="punctuation">:</span> &#x27;body.darkmode--activated&#x27;</span><br><span class="line">  # Waline server address url<span class="punctuation">,</span> you should set this to your own link</span><br><span class="line">  serverURL<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//waline.kouki.ltd   </span></span><br><span class="line"></span><br><span class="line">  # Waline library CDN url<span class="punctuation">,</span> you can set this to your preferred CDN</span><br><span class="line">  libUrl<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/client@v2/dist/waline.js</span></span><br><span class="line"></span><br><span class="line">  # Waline CSS styles CDN url<span class="punctuation">,</span> you can set this to your preferred CDN</span><br><span class="line">  cssUrl<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/client@v2/dist/waline.css</span></span><br><span class="line"></span><br><span class="line">  # If <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> comment count will only be displayed in post page<span class="punctuation">,</span> not in home page</span><br><span class="line">  commentCount<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">  # Pageviews count<span class="punctuation">,</span> Note<span class="punctuation">:</span> You should not enable both `waline.pageview` and `leancloud_visitors`.</span><br><span class="line">  pageview<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"></span><br><span class="line">  # Custom locales</span><br><span class="line">  # locale<span class="punctuation">:</span></span><br><span class="line">  #   placeholder<span class="punctuation">:</span> Welcome to comment # Comment box placeholder</span><br><span class="line"></span><br><span class="line">  # Custom emoji</span><br><span class="line">  emoji<span class="punctuation">:</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/weibo</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/alus</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/bilibili</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/qq</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/tieba</span></span><br><span class="line">     - https<span class="punctuation">:</span><span class="comment">//unpkg.com/@waline/emojis@1.0.1/tw-emoji</span></span><br><span class="line"></span><br><span class="line">  # Comment infomation<span class="punctuation">,</span> valid meta are nick<span class="punctuation">,</span> mail and link</span><br><span class="line">  meta<span class="punctuation">:</span></span><br><span class="line">     - nick</span><br><span class="line">     - mail</span><br><span class="line">     - link</span><br><span class="line"></span><br><span class="line">  # Set required meta field<span class="punctuation">,</span> e.g.<span class="punctuation">:</span> <span class="punctuation">[</span>nick<span class="punctuation">]</span> | <span class="punctuation">[</span>nick<span class="punctuation">,</span> mail<span class="punctuation">]</span></span><br><span class="line">  requiredMeta<span class="punctuation">:</span></span><br><span class="line">     - nick</span><br><span class="line"></span><br><span class="line">  # Language<span class="punctuation">,</span> available values<span class="punctuation">:</span> en-US<span class="punctuation">,</span> zh-CN<span class="punctuation">,</span> zh-TW<span class="punctuation">,</span> pt-BR<span class="punctuation">,</span> ru-RU<span class="punctuation">,</span> jp-JP</span><br><span class="line">  lang<span class="punctuation">:</span> zh-CN</span><br><span class="line"></span><br><span class="line">  # Word limit<span class="punctuation">,</span> no limit when setting to <span class="number">0</span></span><br><span class="line">  wordLimit<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  # Whether enable login<span class="punctuation">,</span> can choose from &#x27;enable&#x27;<span class="punctuation">,</span> &#x27;disable&#x27; and &#x27;force&#x27;</span><br><span class="line">  login<span class="punctuation">:</span> enable</span><br><span class="line"></span><br><span class="line">  # comment per page</span><br><span class="line">  # pageSize<span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Waline-V2评价"><a href="#Waline-V2评价" class="headerlink" title="Waline V2评价"></a>Waline V2评价</h2><ul>
<li>评论管理更加便捷，很多操作不再需要通过管理后台。</li>
<li>支持点赞，支持删除评论，能够显示更多访客信息，并且修复了博主头像不显示的 bug ，还是很值得更新的。</li>
</ul>
<h1 id="现存问题与后续优化计划"><a href="#现存问题与后续优化计划" class="headerlink" title="现存问题与后续优化计划"></a>现存问题与后续优化计划</h1><h2 id="现存问题"><a href="#现存问题" class="headerlink" title="现存问题"></a>现存问题</h2><ul>
<li>更换CDN后，中国大陆地区访客无法正常加载<code>Darkmode.js</code>与<code>Aplayer.js</code>等资源，因而夜间模式、全局音乐等功能不可用。</li>
<li>由于DNS污染等原因，中国大陆地区暂时无法使用评论系统。</li>
</ul>
<p>（非中国大陆地区访客可完美浏览博客）</p>
<h2 id="后续优化计划"><a href="#后续优化计划" class="headerlink" title="后续优化计划"></a>后续优化计划</h2><ul>
<li>寻找新的CDN服务商进行资源分发。</li>
<li>考虑DNS Server转发或采用其他Severless服务解决无法使用评论系统的问题。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.techgrow.cn/">Clay</a></p>
<p><a href="https://blog.csdn.net/tsvico/article/details/124852417">jsdelivr被墙,hexo-next切换为自定义CDN</a></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ISBN号码 201312-2</title>
    <url>/posts/73bd0af.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括$9$位数字、$1$位识别码和$3$位分隔符，其规定格式如“$x-xxx-xxxxx-x$”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如$0-670-82162-4$就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如$0$代表英语；第一个分隔符“$-$”之后的三位数字代表出版社，例如$670$代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。<br>　　识别码的计算方法如下：<br>　　首位数字乘以$1$加上次位数字乘以$2$……以此类推，用所得的结果$mod 11$，所得的余数即为识别码，如果余数为$10$，则识别码为大写字母$X$。例如ISBN号码$0-670-82162-4$中的识别码$4$是这样得到的：对$067082162$这$9$个数字，从左至右，分别乘以$1，2，…，9$，再求和，即$0×1+6×2+……+2×9&#x3D;158$，然后取$158 mod 11$的结果$4$作为识别码。<br>　　编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“$Right$”；如果错误，则输出是正确的ISBN号码。</p>
<span id="more"></span>

<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，假如输入的ISBN号码的识别码正确，那么输出“$Right$”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“$-$”）。</p>
<h2 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h2><p>$0-670-82162-4$</p>
<h2 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h2><p>$Right$</p>
<h2 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h2><p>$0-670-82162-0$</p>
<h2 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h2><p>$0-670-82162-4$</p>
<h2 id="正确解答（Dev-CPP环境）"><a href="#正确解答（Dev-CPP环境）" class="headerlink" title="正确解答（Dev-CPP环境）"></a>正确解答（Dev-CPP环境）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;cin&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;<span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]!=<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">int</span> t=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            s+=t*p;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=str[str.<span class="built_in">length</span>()<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(s%<span class="number">11</span>==<span class="number">10</span>&amp;&amp;str[str.<span class="built_in">length</span>()<span class="number">-1</span>]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Right&quot;</span>&lt;&lt;endl;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s%<span class="number">11</span>==<span class="number">10</span>&amp;&amp;str[str.<span class="built_in">length</span>()<span class="number">-1</span>]!=<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;str.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">12</span>)&lt;&lt;<span class="string">&#x27;X&#x27;</span>&lt;&lt;endl;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==s%<span class="number">11</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Right&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;str.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">12</span>)&lt;&lt;s%<span class="number">11</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不完全正确解答（Dev-CPP环境，仅70分）"><a href="#不完全正确解答（Dev-CPP环境，仅70分）" class="headerlink" title="不完全正确解答（Dev-CPP环境，仅70分）"></a>不完全正确解答（Dev-CPP环境，仅70分）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> isbn[<span class="number">15</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="type">int</span> ic=<span class="number">0</span>,i=<span class="number">0</span>,temp=<span class="number">0</span>,cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,isbn);</span><br><span class="line">	ic=(<span class="type">int</span>)(isbn[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isbn[i]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			temp=(<span class="type">int</span>)(isbn[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ic=ic+temp*cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	ic=ic%<span class="number">11</span>;</span><br><span class="line">	<span class="keyword">if</span>(isbn[<span class="number">12</span>]==<span class="string">&#x27;X&#x27;</span>&amp;&amp;ic==<span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Right&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">char</span>)(ic+<span class="string">&#x27;0&#x27;</span>)==isbn[<span class="number">12</span>])&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Right&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		isbn[<span class="number">12</span>]=(<span class="type">char</span>)(ic+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;%c\n&quot;,isbn[12]);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,isbn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>Jotai：原子化状态管理在现代 React App中的实践</title>
    <url>/posts/2279e119.html</url>
    <content><![CDATA[<p>在构建复杂的 React 应用时，状态管理是一个不可避免的核心问题。从组件的本地 state 到跨组件共享的全局状态，选择一个合适的库来优雅地处理这些数据流至关重要。在我们最近的某个项目中，就选择了 <a href="https://jotai.org/">Jotai</a> 作为状态管理解决方案。</p>
<h2 id="什么是-Jotai？"><a href="#什么是-Jotai？" class="headerlink" title="什么是 Jotai？"></a>什么是 Jotai？</h2><p>Jotai 是一个为 React 设计的原始（primitive）且灵活（flexible）的状态管理库。它的核心思想是 <strong>原子化（atomic）</strong>。与 Redux 或 Zustand 等库将所有状态集中存储在一个大的 store 中不同，Jotai 将状态分解为一个个独立的、微小的单元，称为 <strong>原子（atom）</strong>。</p>
<p>你可以将 atom 想象成 React <code>useState</code> 的全局版本，但它更强大，支持派生状态、异步操作以及与 React Suspense 的集成。</p>
<span id="more"></span>

<h2 id="为什么选择-Jotai？"><a href="#为什么选择-Jotai？" class="headerlink" title="为什么选择 Jotai？"></a>为什么选择 Jotai？</h2><p>在我们的项目中，我们需要管理诸如用户交互产生的对话框状态、聊天历史记录、当前激活的会话等多种状态。我们评估了不同的方案后，最终选择了 Jotai，主要基于以下几点考虑：</p>
<ol>
<li><strong>简洁性与低心智负担</strong>：Jotai 的 API 非常简洁直观。定义和使用 atom 感觉就像使用 React 内置的 Hook 一样自然，几乎没有额外的学习成本和模板代码。这使得开发者可以更专注于业务逻辑本身。</li>
<li><strong>原子化的优势</strong>：<ul>
<li><strong>精确的重渲染</strong>：只有订阅了某个特定 atom 的组件才会在该 atom 更新时重渲染。这避免了大型 store 更新时可能导致的全局性、不必要的渲染，从而提升了应用的性能。</li>
<li><strong>模块化与可维护性</strong>：状态被分解到独立的 atom 中，使得代码更易于组织、理解和维护。每个 atom 只负责一小块状态，职责清晰。</li>
</ul>
</li>
<li><strong>强大的派生状态能力</strong>：Jotai 可以轻松地基于一个或多个其他 atom 创建派生 atom。这意味着你可以根据基础状态计算出新的状态，而无需手动同步，保证了状态的一致性。</li>
<li><strong>开箱即用的工具集</strong>：Jotai 提供了丰富的工具函数（Utilities），例如 <code>atomWithStorage</code>，可以非常方便地将 atom 的状态持久化到 <code>localStorage</code> 或 <code>sessionStorage</code>，简化了本地数据持久化的实现。</li>
</ol>
<h2 id="Jotai-在项目中的实践亮点"><a href="#Jotai-在项目中的实践亮点" class="headerlink" title="Jotai 在项目中的实践亮点"></a>Jotai 在项目中的实践亮点</h2><p>在我们的项目中，Jotai 的优势具体体现在以下几个方面：</p>
<h3 id="1-基础状态管理-atom"><a href="#1-基础状态管理-atom" class="headerlink" title="1. 基础状态管理 ( atom )"></a>1. 基础状态管理 ( <code>atom</code> )</h3><p>我们使用 <code>atom</code> 来定义基础的状态单元。例如，管理不同类型的对话框状态：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atom &#125; <span class="keyword">from</span> <span class="string">&quot;jotai&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义不同类型的对话框可能的数据结构</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DialogContent</span> &#123;</span><br><span class="line">  <span class="comment">// ... 对话框的具体内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 atom 定义存储用户触发对话框的数组</span></span><br><span class="line"><span class="keyword">const</span> userDialogsAtom = atom&lt;<span class="title class_">DialogContent</span>[]&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 atom 定义存储模态对话框的数组</span></span><br><span class="line"><span class="keyword">const</span> modalDialogsAtom = atom&lt;<span class="title class_">DialogContent</span>[]&gt;([]);</span><br></pre></td></tr></table></figure>

<p>通过这种方式，不同类型的对话框状态被清晰地分离到各自的 atom 中，互不干扰。组件可以按需订阅它们需要的 atom。</p>
<h3 id="2-派生状态-Derived-Atoms"><a href="#2-派生状态-Derived-Atoms" class="headerlink" title="2. 派生状态 (Derived Atoms)"></a>2. 派生状态 (Derived Atoms)</h3><p>当需要组合或基于现有状态计算新状态时，派生 atom 就派上了用场。例如，我们需要一个包含所有类型对话框的列表：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atom &#125; <span class="keyword">from</span> <span class="string">&quot;jotai&quot;</span>;</span><br><span class="line"><span class="comment">// (假设 userDialogsAtom 和 modalDialogsAtom 已定义)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个派生 atom，它的值是 userDialogs 和 modalDialogs 的合并结果</span></span><br><span class="line"><span class="keyword">const</span> combinedDialogsAtom = atom&lt;<span class="title class_">DialogContent</span>[]&gt;(<span class="function">(<span class="params">get</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> userDialogs = <span class="title function_">get</span>(userDialogsAtom);</span><br><span class="line">  <span class="keyword">const</span> modalDialogs = <span class="title function_">get</span>(modalDialogsAtom);</span><br><span class="line">  <span class="keyword">return</span> [...userDialogs, ...modalDialogs];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>combinedDialogsAtom</code> 的值会自动根据 <code>userDialogsAtom</code> 和 <code>modalDialogsAtom</code> 的变化而更新。任何订阅了 <code>combinedDialogsAtom</code> 的组件都会在依赖项变化时获得最新的合并列表，而无需手动监听和合并。</p>
<p>同样，我们使用派生 atom 来获取当前活动的聊天会话：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atom &#125; <span class="keyword">from</span> <span class="string">&quot;jotai&quot;</span>;</span><br><span class="line"><span class="comment">// (假设 activeHistoryIdAtom 和 chatHistoriesAtom 已定义)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前激活的聊天会话</span></span><br><span class="line"><span class="keyword">const</span> currentSessionAtom = <span class="title function_">atom</span>(<span class="function">(<span class="params">get</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> activeId = <span class="title function_">get</span>(activeHistoryIdAtom);        <span class="comment">// 依赖 1: 当前激活的 ID</span></span><br><span class="line">  <span class="keyword">const</span> histories = <span class="title function_">get</span>(chatHistoriesAtom);      <span class="comment">// 依赖 2: 所有历史记录</span></span><br><span class="line">  <span class="keyword">return</span> histories.<span class="title function_">find</span>(<span class="function"><span class="params">h</span> =&gt;</span> h.<span class="property">id</span> === activeId) || <span class="literal">null</span>; <span class="comment">// 根据 ID 查找</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>currentSessionAtom</code> 依赖于 <code>activeHistoryIdAtom</code> 和 <code>chatHistoriesAtom</code>。当用户切换会话（<code>activeHistoryIdAtom</code> 变化）或历史记录本身更新时（<code>chatHistoriesAtom</code> 变化），<code>currentSessionAtom</code> 会自动重新计算，确保 UI 显示的是正确的当前会话数据。</p>
<h3 id="3-状态持久化-atomWithStorage"><a href="#3-状态持久化-atomWithStorage" class="headerlink" title="3. 状态持久化 ( atomWithStorage )"></a>3. 状态持久化 ( <code>atomWithStorage</code> )</h3><p>对于需要持久化的状态，如用户的聊天历史记录列表和当前选择的活动会话 ID，我们使用了 <code>atomWithStorage</code> 工具函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; atomWithStorage &#125; <span class="keyword">from</span> <span class="string">&#x27;jotai/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChatHistory</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ... 其他历史记录信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前激活的会话 ID 持久化到 localStorage，键名为 &#x27;activeHistoryId&#x27;</span></span><br><span class="line"><span class="keyword">const</span> activeHistoryIdAtom = atomWithStorage&lt;<span class="built_in">string</span> | <span class="literal">null</span>&gt;(<span class="string">&#x27;activeHistoryId&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有聊天历史记录列表持久化到 localStorage，键名为 &#x27;chatHistories&#x27;</span></span><br><span class="line"><span class="keyword">const</span> chatHistoriesAtom = atomWithStorage&lt;<span class="title class_">ChatHistory</span>[]&gt;(<span class="string">&#x27;chatHistories&#x27;</span>, []);</span><br></pre></td></tr></table></figure>

<p>只需一行代码，Jotai 就处理了与 <code>localStorage</code> 的读写同步。这极大地简化了状态持久化的逻辑，使开发者无需编写繁琐的 <code>localStorage.getItem</code> 和 <code>localStorage.setItem</code> 调用以及相关的 effect 逻辑。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Jotai 以其原子化、简洁和灵活的特性，为我们的 React 项目提供了一个高效且易于维护的状态管理方案。它的核心理念与 React Hooks 高度契合，使得状态管理变得更加直观和分散化。通过精确的重渲染优化、强大的派生状态能力以及便捷的持久化工具，Jotai 帮助我们构建了性能更好、代码结构更清晰的应用。如果你正在寻找一个轻量级、现代化的 React 状态管理库，Jotai 绝对值得一试。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Jotai</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/posts/4b668c47.html</url>
    <content><![CDATA[<h3 id="Vue的介绍"><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h3><p>官网教程:<a href="https://cn.vuejs.org/v2/guide/installation.html">https://cn.vuejs.org/v2/guide/installation.html</a></p>
<p>掘金:<a href="https://juejin.im/">https://juejin.im/</a></p>
<p>cdn(在线的网络连接资源):<a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p>
<h3 id="Vue的简介"><a href="#Vue的简介" class="headerlink" title="Vue的简介"></a>Vue的简介</h3><p>　Vue (读音 &#x2F;vjuː&#x2F;，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层(指的是前端页面,即MTV中的T—&gt;template模板)。</p>
<span id="more"></span>

<h3 id="下载-库引入"><a href="#下载-库引入" class="headerlink" title="下载&amp;库引入"></a>下载&amp;库引入</h3><p>　Vue.js类似于jQuery.js,是一个库,在HTML文档中直接使用script引入就能使用了.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	引入之后,将该HTML文档使用浏览器打开,鼠标右键”检查”,选择Console,输入Vue,显示页面上定义了一个Vue函数.　　</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="title class_">Vue</span></span><br><span class="line">&lt;&lt; ƒ <span class="title class_">Vue</span> (options) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vue</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_init</span>(options);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>　使用的时候需要先新建一个Vue实例,数据(创建Vue实例的参数中找)驱动视图(标签).下面是一个完整的HTML文件的栗子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span><span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--视图--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板语法插值: &#123;&#123; &#125;&#125;表示插值语法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.引包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//实例化Vue</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//绑定根元素,使用标签选择器,这里是ID选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;<span class="comment">//数据属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;alex&#x27;</span>,<span class="comment">//声明数据属性</span></span></span><br><span class="line"><span class="language-javascript">            　　&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模板语法介绍"><a href="#模板语法介绍" class="headerlink" title="模板语法介绍"></a>模板语法介绍</h3><p>　Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。用大白话来说就是Vue中的数据属性使用模板语法来渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板语法:注意前后都要加空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; 变量 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; 1+1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; &#x27;hello&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; 函数的调用 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; &#123;name:&#x27;alex&#x27;&#125; &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  备注:对象</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; 1==1?&#x27;真的&#x27;:&#x27;假的&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  备注:三元运算</span><br></pre></td></tr></table></figure>

<h3 id="指令系统介绍"><a href="#指令系统介绍" class="headerlink" title="指令系统介绍"></a>指令系统介绍</h3><blockquote>
<h4 id="v-text-v-html"><a href="#v-text-v-html" class="headerlink" title="v-text&amp;v-html"></a>v-text&amp;v-html</h4></blockquote>
<p>​	v-text类似于双大括号,会将数据解释为普通文本—&gt;只渲染文本</p>
<p>​	v-html输出HTML 代码—&gt;既渲染文本又渲染标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">　　 <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--视图--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板语法插值: &#123;&#123; &#125;&#125;表示插值语法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--等效于innerText  innerHTML text() html()--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-html</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.引包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//绑定根元素,使用标签选择器,这里是ID选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//数据 属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;alex是个⼤大SB&#x27;</span>,<span class="comment">//声明数据属性</span></span></span><br><span class="line"><span class="language-javascript">                　　　　 <span class="attr">name</span>:<span class="string">&#x27;&lt;span&gt;黄瓜&lt;/span&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>

<blockquote>
<h4 id="v-if-v-show"><a href="#v-if-v-show" class="headerlink" title="v-if&amp;v-show"></a>v-if&amp;v-show</h4></blockquote>
<p>​		<code>　　v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true 值的时候被渲染。</p>
<p>　　<code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS 属性 <code>display</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span><span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      　　　　<span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">   　　　　　　　　<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            　　 <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">　　　　　　　　　 <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">             &#125;</span></span><br><span class="line"><span class="language-css">       </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>　　<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.引包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//绑定根元素,使用标签选择器,这里是ID选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//数据 属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                &lt;br&gt;　　　　&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>​	页面显示效果如下:</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/1364389-20191205172919666-160760803.png"></p>
<p>​	如果将变量isShow改为false。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/1364389-20191205172958131-993856459.png"></p>
<p>总结<code>v-if</code> vs <code>v-show:</code></p>
<p><code>　　v-if</code>对当前元素创建&#x2F;销毁;v-show对当前元素显示&#x2F;隐藏.</p>
<p><code>　　v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>　　v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>　　相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>　　一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<hr>

<blockquote>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4></blockquote>
<blockquote>
<h5 id="v-for遍历数组元素"><a href="#v-for遍历数组元素" class="headerlink" title="v-for遍历数组元素"></a><strong>v-for</strong>遍历数组元素</h5></blockquote>
<p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>Foo</li>
<li>Bar</li>
</ul>
<p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的属性。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">parentMessage</span>: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>Parent - 0 - Foo</li>
<li>Parent - 1 - Bar</li>
</ul>
<p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<h5 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h5></blockquote>
<p>你也可以用 <code>v-for</code> 来遍历一个对象的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#v-for-object&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">object</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">      <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)　</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>How to do lists in Vue</li>
<li>Jane Doe</li>
<li>2016-04-10</li>
</ul>
<p>你也可以提供第二个的参数为 property 名称 (也就是键名)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">   &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>　</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<ul>
<li>title: How to do lists in Vue</li>
<li>author: Jane Doe</li>
<li>publishedAt: 2016-04-10</li>
</ul>
<p>还可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>　</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<ul>
<li>title: How to do lists in Vue</li>
<li>author: Jane Doe</li>
<li>publishedAt: 2016-04-10</li>
</ul>
<blockquote>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5></blockquote>
<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> 属性(通俗点说,就是为了v-for循环的元素和索引一一对应而不出现混乱,要在使用v-for的时候添加v-bind:key ,而且不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用字符串或数值类型的值。)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>

<blockquote>
<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4></blockquote>
<p><code>v-bind</code> 主要⽤来绑定标签上的属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span> = <span class="string">&#x27;(item,index) in menus&#x27;</span> <span class="attr">v-bind:key</span> = <span class="string">&#x27;index&#x27;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; index &#125;&#125;-----&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> 特性与表达式 <code>url</code> 的值绑定。</p>
<p>传给v-bind:class一个对象(也就是Python中的字典)，动态地切换class</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">  isActive:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>也可以传入多个属性来动态切换多个class。此外， v-bind:class指令也可以与普通的 class 属性共存</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>小结:</p>
<p>控制一个标签显示&#x2F;隐藏的三种方式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,v-if=true,创建标签;v-if=false,销毁标签</span></span><br><span class="line">===&gt;真正的对标签进行创建/销毁,展示在代码上就是该标签的代码显示/被注释</span><br><span class="line"><span class="comment">//2,v-show=true,标签渲染;v-show=false,标签不渲染</span></span><br><span class="line">===&gt;标签是否渲染,为<span class="literal">false</span>,当v-show=<span class="literal">false</span>时候,给标签添加属性style=“<span class="attr">display</span>:none;”</span><br><span class="line"><span class="comment">//3,v-bind:class=&quot;&#123;active:true&#125;”,给标签的class添加上active类</span></span><br><span class="line">===&gt;实现原理的实质还是控制<span class="variable constant_">CSS</span>,和v-show类似</span><br></pre></td></tr></table></figure>

<hr>

<blockquote>
<h4 id="v-on事件绑定"><a href="#v-on事件绑定" class="headerlink" title="v-on事件绑定"></a>v-on事件绑定</h4><h5 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h5></blockquote>
<p>v-on 指令监听 DOM 事件，并在触发时运⾏一些 JavaScript 代码</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/1364389-20191205174831634-641493162.png"></p>
<blockquote>
<h5 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h5></blockquote>
<p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可以用 JavaScript 直接调用方法</span></span><br><span class="line">example2.<span class="title function_">greet</span>() <span class="comment">// =&gt; &#x27;Hello Vue.js!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/1364389-20191205174947669-1065898415.png"></p>
<blockquote>
<h5 id="为什么在HTML中监听事件"><a href="#为什么在HTML中监听事件" class="headerlink" title="为什么在HTML中监听事件?"></a>为什么在<strong>HTML</strong>中监听事件?</h5></blockquote>
<p>使用 <code>v-on</code> 有几个好处：</p>
<ol>
<li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li>
<li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li>
<li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li>
</ol>
<hr>

<blockquote>
<h4 id="v-model表单输入绑定"><a href="#v-model表单输入绑定" class="headerlink" title="v-model表单输入绑定"></a>v-model表单输入绑定</h4></blockquote>
<p>v-model 指令在表单 <code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建<strong>双向数据绑定</strong>。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进⾏一些特殊处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;扁我&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    message: <span class="string">&quot;我的消息&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>结果:(下面的p标签的内容和上面input框的内容同步的变化)</p>
<p>双向的数据绑定:原本是数据驱动视图,当我们改变了这个视图中的数据之后,另一个使用该数据的标签也相应的发生了改变.注意:双向数据绑定只发生在指令系统作用在表单这类标签上.</p>
<p>注意:</p>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<hr>

<blockquote>
<h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4></blockquote>
<p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p>
<blockquote>
<h5 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h5></blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h5 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h5></blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>小结:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在页面中绑定属性和定义事件是用得最多的,所以<span class="title class_">Vue</span>提供了相应的简写 --&gt;</span><br><span class="line"> vue提供的简写   v-<span class="attr">on</span>:简写为@ </span><br><span class="line"> vue提供的简写   v-bind直接省略不写,注意冒号要留下 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git踩坑之解决error: failed to push some refs to 远程库的报错</title>
    <url>/posts/fc8787d6.html</url>
    <content><![CDATA[<h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>首先这个报错大概长这个样子，一般出现在部署到远程库时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: failed to push some refs to &#x27;git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure>

<p>这个错误大概有2个原因：</p>
<ol>
<li><p>网络错误（在我大天朝的网络下出现什么玄学问题很正常的）</p>
</li>
<li><p>远程库分支内容与本地内容存在双边不同步差异，系统总是先拉取再推送，但是拉取总是失败</p>
</li>
</ol>
<span id="more"></span>

<h3 id="对于网络错误的解决办法"><a href="#对于网络错误的解决办法" class="headerlink" title="对于网络错误的解决办法"></a>对于网络错误的解决办法</h3><p>首先建议先多试几次部署，如果还不行可以把远程库地址改成SSH方式进行尝试。不过这样修改了之后再部署可能提示SSH Key不存在或者无法提交，那么就再重新生成一次SSH Key，具体怎么操作可以百度。</p>
<h3 id="对于第二种原因的解决办法"><a href="#对于第二种原因的解决办法" class="headerlink" title="对于第二种原因的解决办法"></a>对于第二种原因的解决办法</h3><p>先用下面的命令来撤除上一次commit，把远程库中的更新合并到本地库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>

<p>然后再进行部署推送。</p>
<p>注意最好不要用git push -f强制推送，尤其是项目存在多个维护者时，否则可能丢失历史数据（百度上好多教程直接让用这个&#x3D; &#x3D;</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>dummy节点</title>
    <url>/posts/556c2443.html</url>
    <content><![CDATA[<p>做leetcode链表题的时候，需要额外考虑链表头部的特殊情况。但是，往往考虑不够周全，导致最后通过不断试错，修改代码。代码变得臃肿，可读性差。<br>其实，引入一个dummy节点就可以解决大部分需要考虑头节点的链表题。</p>
<span id="more"></span>

<h3 id="什么是dummy节点？"><a href="#什么是dummy节点？" class="headerlink" title="什么是dummy节点？"></a>什么是dummy节点？</h3><p>dummy（假的）节点是一个虚拟创建的节点，放在链表的最前面，指向头节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">let dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(); <span class="comment">//创建新节点</span></span><br><span class="line">dummy.next = head;  <span class="comment">//让dummy指向头节点</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> dummy.next;  <span class="comment">//程序结束后返回链表，返回的是dummy.next，而非dummy</span></span><br></pre></td></tr></table></figure>

<h3 id="使用dummy的场景有哪些？"><a href="#使用dummy的场景有哪些？" class="headerlink" title="使用dummy的场景有哪些？"></a>使用dummy的场景有哪些？</h3><p>前面提到，使用dummy可以避免很多由于头节点特殊性产生的坑，让代码更优雅。<br>那么dummy的应用场景主要有以下两类：</p>
<ul>
<li>作为新链表的头部<ul>
<li>（可参考leetcode第2题、第21题）</li>
</ul>
</li>
<li>解决链表的头部引起的极端问题<ul>
<li>（可参考leetcode第19题、第24题）</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用dummy最主要的原因是消除头节点的特殊性，使用一个虚拟节点冒充头节点，而真正的头节点就和其他普通节点一样。<br>当我们处理完链表之后，只需要返回dummy.next，由于单向链表只能从头往后遍历的性质，就可以舍弃掉dummy，返回的就是我们需要的链表。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript中未声明的变量</title>
    <url>/posts/87b92057.html</url>
    <content><![CDATA[<p>JavaScript通常有<strong>3种</strong>声明变量的方式</p>
<ol>
<li>var和let -&gt; 只存在作用域的区别</li>
<li>const -&gt; 只读</li>
<li>直接赋值，不声明</li>
</ol>
<span id="more"></span>

<p>其中第3种是最容易忽略的，这样会产生一个<strong>全局变量</strong>，算是<strong>未声明全局变量</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   x = <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(x) <span class="comment">//  Uncaught ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">//这里只声明了foo但是没有运行foo，所以报错</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">   x = <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">alert</span>(x) <span class="comment">// 显示为666</span></span><br><span class="line"><span class="comment">//可以看出，这里跳出了foo函数还能够打印出x的数值，所以为全局变量</span></span><br></pre></td></tr></table></figure>



<p>比如下面这样直接给x赋值，前面不加任何关键字。这样做的结果是在js能被执行通过，但是会被警告。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x = <span class="number">666</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>《灌篮高手》，坐在电影院里就足够了</title>
    <url>/posts/d4a3be1c.html</url>
    <content><![CDATA[<p>电影院里很久没有出现这样的景象了。</p>
<p>零点首映时，中年人们拖着疲惫的身躯，从城市的各个角落中钻出来，趁着夜色摸到电影院。</p>
<p>在排队进场之前，他们有的还在回复工作内容，有的还在叮嘱父母哄睡孩子，更多的人则打开搜索引擎，搜索当年戛然而止的记忆。</p>
<p>只有那些穿在外套里面，皱皱巴巴、微微变色的球衣，证明着他们不曾忘记的青春。虽然有些衣服明显不再合身，有些号码都已经斑驳、脱落，但是他们还是穿着来了。</p>
<p>200斤的“樱木花道”就站在40岁的“流川枫”身前，后面排队的是发际线堪忧的“仙道彰”……</p>
<p>当手绘的湘北五虎线稿跃然于大银幕上时，电影院中鸦雀无声，五个少年迎面“走起来”时，电影院中窸窸窣窣抽纸巾的声音提醒着观众：</p>
<p>“那个回忆，他们回来了。”</p>
<span id="more"></span>

<p>和此前的漫画以及TV版动画不同，电影版《灌篮高手》的主角，从樱木花道换成了宫城良田。</p>
<p>那是一个身高只有168cm的16岁少年。在大部分关于《灌篮高手》的回忆中，宫城良田只是湘北五虎里面那个跑得飞快，很会传球的小个子。</p>
<p>颜值不如流川枫、搞笑没有樱木花道尽力、精神属性不敌赤木刚宪、戏剧冲突更比不上三井寿，在湘北的比赛中，更是鲜有看到宫城良田以一己之力战胜对手的战例。</p>
<p>宫城良田在观众中的人气甚至不如仙道彰、花形透、藤真健司……有观众曾经表示，漫画中水户洋平的戏份都要比宫城良田多。</p>
<p>电影上映前，井上雄彦曾表示，当初创作《灌篮高手》的时候，自己仅仅23岁，而如今27年过去，人生视角和价值观发生了巨大的变化。</p>
<p>“毕竟大家都生活在痛苦中，不是所有人都拥有无限的可能性。”井上雄彦说。</p>
<p>和不少打着怀旧牌的创作者一样，《灌篮高手》同样面临着究竟是迎合老粉丝，还是照顾新观众的问题，无论偏向哪一边，都很容易翻车。</p>
<p>其实，电影中宫城良田的一部分故事，在当年《灌篮高手》完结后，井上雄彦曾经创作过一部叫做《耳环》的短篇作品，讲述了在哥哥去世后，宫城良田和一个女孩子的故事，在那部作品中，海边的洞穴、捕鱼去世的哥哥都曾经出现过。</p>
<p>但这部作品的影响力并不高，很多当年喜爱《灌篮高手》的年轻人，也并不都看过《耳环》。</p>
<p>对于新观众而言，由于比赛只有一场，需要一个完整的故事线索来承接比赛的内容，一个较为丰满，具有冲突的故事，却是可以降低新观众观影的门槛。</p>
<p>电影中的宫城良田的剧情线很简单，自幼丧父，12岁时哥哥也去世，就剩下母亲一人拉扯自己和妹妹，受到去世的哥哥影响，宫城良田小学起就喜欢篮球，并且以击败山王工业为目标，篮球对于宫城良田来说既像一个爱好，也像是某种缅怀仪式。</p>
<p>带着击败山王的梦想，一家人从冲绳来到神奈川，宫城也进入湘北高中，从而结识了赤木刚宪、樱木花道等人，最终在全国大赛中战胜山王工业。</p>
<p>宫城良田的故事和湘北VS山王工业的比赛，穿插呈现，基本就是全片的内容。对于老观众来说，那场比赛的结果甚至是过程，都已经无须赘述。赤木的受限、三井的爆发、流川的觉醒以及樱木的绝杀，这些都不是新鲜事。</p>
<p>电影版《灌篮高手》采用了3D建模渲染成2D画风的“三渲二”的技术，在上映前遭到了不少老粉的吐槽，认为这样的处理缺少了曾经那样要扎破纸张的线条表现力，人物的面部和肢体线条平整光滑后，也不那么能让人接受。</p>
<p>从观感上看，球员们的篮球技术动作确实比20多年前更真实，但是面部表情也的确呈现出了一种“医美过度”的感觉。尤其是这个版本的“流川枫”，不知道是活在什么群体的“审美点”上。</p>
<p>由于加入了大量宫城良田家庭戏份回忆，让湘北VS山王的比赛变得稍显破碎，而宫城良田的家庭戏，也并没有真正做到前后呼应，山王的比赛和宫城良田的故事仍然会让观众感受到脱节。</p>
<p>而在原作中，湘北和山王的比赛中有大量细节被取消，仍然令观众感到遗憾。山王的强大只在宫城良田的回忆中进行了铺垫，而鱼住纯骂醒赤木刚宪，樱木表白晴子说“我很喜欢，这次是真心的”的告白都没有出现，脱力后三井寿说的那句“我是三井寿，一个永不放弃的人……”也没有出现。</p>
<p>这些细节的缺失，让这个回忆杀显得遗憾大于满足。</p>
<p>在井上雄彦的《灌篮高手》中，篮球虽然是主角，但从来不是全部，一群不完美的人，因为篮球凑在一起，互相之间的摩擦和变化以及成长，才是《灌篮高手》真正吸引人的地方。</p>
<p>主角们幼稚、不成熟却拼搏不认输，而一众配角们的存在都只为阐述“友爱”二字，拿水户洋平来说，为了樱木专心打球，水户洋平替樱木扛下了打架斗殴的责任，并用攒下的打工钱买摄像机、录影带，协助拍摄，以纠正樱木的错误动作，让读者看到了到底什么是真朋友。</p>
<p>大量出色的细节和配角，让这些年轻人的青春不那样平凡，在电影中，或是因为体量的原因，这些东西均无法呈现，令人非常遗憾。</p>
<p>在当年，不少年轻人在初看《灌篮高手》时，甚至没有看过一场正式的篮球比赛转播，很多人的篮球初恋，便是来自《灌篮高手》。</p>
<p>曾经漫画和动画中写实的篮球技战术，如今也随着电视转播技术的先进、大型赛事的影响力增大而消解，没有年轻人再选择《灌篮高手》作为自己的篮球启蒙。</p>
<p>所以无论井上雄彦怎样讨巧，怎么妥协，《灌篮高手》注定不是一部能承载“拉新”能力的电影作品，它仍然只是一部用于收割情怀的作品。</p>
<p>但对于大部分购票观影的中年人来说，能买上一张票，坐在电影院里，已经足够了。</p>
<hr>

<p>井上雄彦在谈到宫城良田的时候，说他就像自己。</p>
<p>宫城良田和井上雄彦一样，是家中三个孩子的老二，夹在中间；在湘北，赤木刚宪、木暮公延、三井寿是三年级生，流川枫、樱木花道则是一年级生，宫城良田仍然是夹在中间。</p>
<p>所以他决定在26年后重启，把这个“夹在中间”的人推到台前来，让人们看到他的成长经历、过往的苦难和最终鼓起的勇气和决心。</p>
<p>这其实是《灌篮高手》和其他贩卖情怀的作品最大的不同之处，虽然俗套，但井上雄彦依然希望和读者一起成长，而非停在当年，收割余利。</p>
<p>巧合的是，当年那些看着湘北披荆斩棘的孩子，如今也正是被“夹在中间”的人。</p>
<p>小孩子可以熊，老年人可以犟，唯独夹在中间的人必须循规蹈矩，必须墨守成规，必须活得无比正确且正常。</p>
<p>在电影版的灌篮高手里，井上没有过多地着墨于“梦想”“友情”“热血”，反而花了很大的笔墨在城市乡村的反差、单身母亲的艰难生活上，就连原著中的青春懵懂的爱情，也几乎没有任何描述。电影中，赤木晴子就坐在看台上高宫望的身边，毫无任何光环可言。</p>
<p>每个被夹在中间的中年人，都像是面对着一个“山王工业”的宫城良田，但又远没有宫城良田幸运。宫城良田速度很快，但身高不够，对抗有限，还缺乏投篮能力。但他身边有精神力拉满的赤木刚宪、有技术全面的流川枫、有外线投射出众的三井寿，甚至还有天赋爆棚的樱木花道。</p>
<p>在山王工业头牌泽北荣治的一次次杀入篮下得分后，这帮体力透支、能力明显不如对手的年轻人，甚至还能打出此前没有的变化和应对，最终靠流川枫和樱木花道连线，压哨绝杀比赛。</p>
<p>而那个镜片闪光，肚腩肥硕的老头，更是不可多得的人生导师，他熟悉每个人的特点，尊重个体，并且放大他们的优点，甚至可以允许他们在场上“任性”。</p>
<p>这一切，在“夹在中间”的人看来，简直就是奢望。生活哪有那么多以弱克强，哪有那么多压哨逆转，更多只是遗憾退场。</p>
<p>电影中，输掉比赛后的泽北荣治，在球员通道中无助地跪下哭泣，那才是“夹在中间”的人们的常态。</p>
<p>安西教练说“自己放弃，比赛就结束了”，中年们哭了；樱木花道说“这就是我最光荣的时刻”，中年们也哭了；樱木花道绝杀后和流川枫的世纪击掌，中年们又哭了……</p>
<p>但在电影院中哭泣的中年人，仅仅是哭青春回来了么？还有很大的一部分在哭，青春回不来了。在那些消逝的青春汗水中，我们到底失去了什么，又得到了什么？</p>
<p>不知道有多少观众注意到电影中，湘北和山王工业比赛中，湘北替补席上的那个叫做石井健太郎的球员，全场比赛他都没有获得一分钟上场机会，在比赛临近尾声的时候，石井健太郎高举双臂，眼泪肆意流淌，却没有一句对白。</p>
<p>等到影片结束，彩蛋播完，那两首经典的音乐《好想大声说爱你》和《直到世界的尽头》都没有响起，取而代之的则是两首节奏性更强、唱腔接近嘶吼的作品。</p>
<p>伴随着嘶吼，灯光亮起，那些被“夹在中间”的观众们，默默擦干眼泪，站起身把球衣塞进裤子，系紧。</p>
<p>然后，一头扎进黑暗的夜色里。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Vue进阶学习笔记</title>
    <url>/posts/9e2aeba2.html</url>
    <content><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico<span class="punctuation">:</span> 页签图标</span><br><span class="line">│   └── index.html<span class="punctuation">:</span> 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets<span class="punctuation">:</span> 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component<span class="punctuation">:</span> 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue<span class="punctuation">:</span> 汇总所有组件</span><br><span class="line">│   │── main.js<span class="punctuation">:</span> 入口文件</span><br><span class="line">├── .gitignore<span class="punctuation">:</span> git版本管制忽略的配置</span><br><span class="line">├── babel.config.js<span class="punctuation">:</span> babel的配置文件</span><br><span class="line">├── package.json<span class="punctuation">:</span> 应用包配置文件 </span><br><span class="line">├── README.md<span class="punctuation">:</span> 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol>
<li>vue.js与vue.runtime.xxx.js的区别：<ol>
<li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li>
<li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li>
</ol>
</li>
<li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li>
</ol>
<h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol>
<li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li>
<li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li>
</ol>
<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol>
<li>被用来给元素或子组件注册引用信息（id的替代者）</li>
<li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li>
<li>使用方式：<ol>
<li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>获取：<code>this.$refs.xxx</code></li>
</ol>
</li>
</ol>
<h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol>
<li><p>功能：让组件接收外部传过来的数据</p>
</li>
<li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>
</li>
<li><p>接收数据：</p>
<ol>
<li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p>
</li>
<li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p>
</li>
<li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"> <span class="attr">name</span>:&#123;</span><br><span class="line"> <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"> <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"> <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>
</blockquote>
</li>
</ol>
<h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol>
<li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p>
</li>
<li><p>使用方式：</p>
<p> 第一步定义混合：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 第二步使用混入：</p>
<p>  全局混入：<code>Vue.mixin(xxx)</code><br>  局部混入：<code>mixins:[&#39;xxx&#39;]  </code></p>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li><p>功能：用于增强Vue</p>
</li>
<li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p>
</li>
<li><p>定义插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件：<code>Vue.use()</code></p>
</li>
</ol>
<h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol>
<li>作用：让样式在局部生效，防止冲突。</li>
<li>写法：<code>&lt;style scoped&gt;</code></li>
</ol>
<h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol>
<li><p>组件化编码流程：</p>
<p>  (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p>
<p>  (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>
<p>  ​      1).一个组件在用：放在组件自身即可。</p>
<p>  ​      2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p>
<p>  (3).实现交互：从绑定事件开始。</p>
</li>
<li><p>props适用于：</p>
<p>  (1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p>
<p>  (2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p>
</li>
<li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p>
</li>
<li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>
</li>
</ol>
<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol>
<li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p>
</li>
<li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>
</li>
<li><p>相关API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p>
<p>   ​    该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p>
<p>   ​    该方法接受一个键名作为参数，返回键名对应的值。</p>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p>
<p>   ​    该方法接受一个键名作为参数，并把该键名从存储中删除。</p>
</li>
<li><p><code> xxxxxStorage.clear()</code></p>
<p>   ​    该方法会清空存储中的所有数据。</p>
</li>
</ol>
</li>
<li><p>备注：</p>
<ol>
<li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li>
<li>LocalStorage存储的内容，需要手动清除才会消失。</li>
<li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li>
<li><code>JSON.parse(null)</code>的结果依然是null。</li>
</ol>
</li>
</ol>
<h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol>
<li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p>
</li>
<li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p>
</li>
<li><p>绑定自定义事件：</p>
<ol>
<li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p>
</li>
<li><p>第二种方式，在父组件中：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p>
</li>
</ol>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>    </p>
</li>
<li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p>
</li>
<li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p>
</li>
</ol>
<h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol>
<li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>安装全局事件总线：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">   &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用事件总线：</p>
<ol>
<li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p>
</li>
</ol>
</li>
<li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p>
</li>
</ol>
<h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol>
<li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>使用步骤：</p>
<ol>
<li><p>安装pubsub：<code>npm i pubsub-js</code></p>
</li>
<li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p>
</li>
<li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p>
</li>
<li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p>
</li>
</ol>
</li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li>语法：<code>this.$nextTick(回调函数)</code></li>
<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>
<li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li>
</ol>
<h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol>
<li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p>
</li>
<li><p>写法：</p>
<ol>
<li><p>准备好样式：</p>
<ul>
<li>元素进入的样式：<ol>
<li>v-enter：进入的起点</li>
<li>v-enter-active：进入过程中</li>
<li>v-enter-to：进入的终点</li>
</ol>
</li>
<li>元素离开的样式：<ol>
<li>v-leave：离开的起点</li>
<li>v-leave-active：离开过程中</li>
<li>v-leave-to：离开的终点</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">   &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p>
</li>
</ol>
</li>
</ol>
<h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>  在vue.config.js中添加如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>  编写vue.config.js配置具体代理规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>
</ol>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol>
<li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p>
</li>
<li><p>分类：默认插槽、具名插槽、作用域插槽</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>默认插槽：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具名插槽：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域插槽：</p>
<ol>
<li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>
</li>
<li><p>具体编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">               &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​     在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
<h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​     多个组件需要共享数据时</p>
<h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol>
<li><p>创建文件：<code>src/store/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol>
<li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">   <span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">   <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p>
</li>
<li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>
<blockquote>
<p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>
</blockquote>
</li>
</ol>
<h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol>
<li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中读取数据：<code>$store.getters.bigSum</code></p>
</li>
</ol>
<h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol>
<li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>
</blockquote>
<h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol>
<li><p>目的：让代码更好维护，让多种数据分类更加明确。</p>
</li>
<li><p>修改<code>store.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中读取state数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中读取getters数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中调用dispatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中调用commit</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li>
<li>前端路由：key是路径，value是组件。</li>
</ol>
<h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol>
<li><p>安装vue-router，命令：<code>npm i vue-router</code></p>
</li>
<li><p>应用插件：<code>Vue.use(VueRouter)</code></p>
</li>
<li><p>编写router配置项:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">   <span class="attr">routes</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现切换（active-class可配置高亮样式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定展示位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li>
</ol>
<h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol>
<li><p>配置路由规则，使用children配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳转（要写完整路径）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol>
<li><p>传递参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">            </span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">      query:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol>
<li><p>作用：可以简化路由的跳转。</p>
</li>
<li><p>如何使用</p>
<ol>
<li><p>给路由命名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">   <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">         <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">               <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">               <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>简化跳转：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      name:&#x27;hello&#x27;,</span><br><span class="line">      query:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol>
<li><p>配置路由，声明接收params参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">   <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">         <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">               <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">               <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">            </span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      name:&#x27;xiangqing&#x27;,</span><br><span class="line">      params:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p>
</blockquote>
</li>
<li><p>接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>  作用：让路由组件更方便的收到参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">   <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">         <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-的replace属性"><a href="#8-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li>
<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol>
<li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p>
</li>
<li><p>具体编码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol>
<li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p>
</li>
<li><p>具体编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol>
<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>
<li>具体名字：<ol>
<li><code>activated</code>路由组件被激活时触发。</li>
<li><code>deactivated</code>路由组件失活时触发。</li>
</ol>
</li>
</ol>
<h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol>
<li><p>作用：对路由进行权限控制</p>
</li>
<li><p>分类：全局守卫、独享守卫、组件内守卫</p>
</li>
<li><p>全局守卫:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">         <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">         <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>独享守卫:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">         <span class="title function_">next</span>()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">         <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件内守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol>
<li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li>
<li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li>
<li>hash模式：<ol>
<li>地址中永远带着#号，不美观 。</li>
<li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好。</li>
</ol>
</li>
<li>history模式：<ol>
<li>地址干净，美观 。</li>
<li>兼容性和hash模式相比略差。</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>利用新Repository给Github Pages配置多个域名</title>
    <url>/posts/9b69c506.html</url>
    <content><![CDATA[<h4 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h4><p>一个Github Pages只能绑定一个自定义域名，但在已经绑定了一个域名的情况下，想使用多个域名访问到托管到Github Pages的页面时该怎么办呢？</p>
<h5 id="踩坑经历"><a href="#踩坑经历" class="headerlink" title="踩坑经历"></a>踩坑经历</h5><p>Github Pages对应的Repository下有一个CNAME文件，它包含了你的自定义域名，但是只能添加一条记录，不能添加两条域名记录。</p>
<p>直接在域名DNS服务商进行DNS配置也是不可以的，否则会出现“404 There is not a GitHub Pages site here.”的错误信息。</p>
<span id="more"></span>

<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>我们可以通过设置另外一个新的Github Pages来绑定新的域名，再通过新的Github Pages来重定向到指定的Github Pages。下面介绍方法步骤。</p>
<h5 id="第一步：新建Repository"><a href="#第一步：新建Repository" class="headerlink" title="第一步：新建Repository"></a>第一步：新建Repository</h5><p>打开Github主页，点击右上角的加号，在下拉框内选择New Repository来新建一个名字任意的Repository。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/Snipaste_2021-09-06_10-50-49.png"></p>
<h5 id="第二步：配置Repository"><a href="#第二步：配置Repository" class="headerlink" title="第二步：配置Repository"></a>第二步：配置Repository</h5><p>我创建了一个名字为Site-Redirecting的Repository。为了使这个Repository能使用Github Pages服务，在创建一个全新的Repository后，可以向Repository内放置一个<code>_config.yml</code> 文件（内容参考如下）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">title: koukihk</span><br><span class="line">author: koukihk</span><br></pre></td></tr></table></figure>

<p>保存文件后，在Repository内的Setting-&gt;Pages内配置你的域名信息。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/Snipaste_2021-09-06_10-53-08.png"></p>
<p>以图示新域名为例子，配置成功后，如果在DNS服务商处将 <a href="http://www.kouki.xyz/">www.kouki.xyz</a> 这个域名解析到新Github Pages，就能通过它访问到新Github Pages，只不过Page没有内容。</p>
<h5 id="第三步：新建重定向页面"><a href="#第三步：新建重定向页面" class="headerlink" title="第三步：新建重定向页面"></a>第三步：新建重定向页面</h5><p>在Repository内新建一个html文件，目的是通过它将重定向到我们原来的Github Pages，内容可以参考下面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>正在重定向……<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> domain = <span class="string">&quot;kouki.ltd&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> current = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> target = current.<span class="title function_">substring</span>(current.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>, current.<span class="title function_">indexOf</span>(<span class="string">&#x27;:&#x27;</span>) + <span class="number">3</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;//&quot;</span> + domain + target;</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&quot;//&quot;</span> + domain + target;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        正在重定向……</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，新建的Repository应包含下面几个文件。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/Snipaste_2021-09-06_11-01-34.png"></p>
<h5 id="第四步：配置新域名DNS"><a href="#第四步：配置新域名DNS" class="headerlink" title="第四步：配置新域名DNS"></a>第四步：配置新域名DNS</h5><p>在你的DNS服务商处，将新域名解析到和旧域名一样的地址即可，即旧域名是怎样解析的新域名就怎样解析，建议使用一条A记录和一条CNAME记录，关于如何配置可以参考其他文章。</p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>打开新域名 <a href="http://www.kouki.xyz/">www.kouki.xyz</a> ，标签上显示短暂的“正在重定向”提示，随后跳转到旧域名。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.yanbinghu.com/2019/03/29/25951.html">多个域名映射同一个github pages | 守望的个人博客 (yanbinghu.com)</a></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>为站点添加Aplayer全局播放器（两种布局方案）</title>
    <url>/posts/1128bacf.html</url>
    <content><![CDATA[<p>Aplayer是一个基于JavaScript的播放器插件，而MetingJs则是基于Aplayer插件封装好的插件，开箱即用。</p>
<p>起初在博客中添加Aplayer播放器时，是准备把它加入到侧边栏中，但是效果并不好。播放器控件可能会有显示不完整的问题，并且在呼出与关闭侧边栏时，会有卡顿的现象。对于我现在使用的Next主题来说，将播放器置于页面左下角是比较好的选择。下面介绍两种播放器的布局方案，并提供实现全局效果（切换页面而不打断音乐播放）的方案。</p>
<span id="more"></span>

<h4 id="添加到侧边栏"><a href="#添加到侧边栏" class="headerlink" title="添加到侧边栏"></a>添加到侧边栏</h4><p>以Next主题、添加网易云音乐歌单为例。打开主题目录：<code>themes\next\layout\_macro\sidebar.swig</code>找到<code>sidebar-inner</code>，复制下面代码粘贴到此<code>&lt;div&gt;</code>标签后即可。其中，data-id&#x3D;””的双引号中填写歌单或者歌曲的id。（在Next 8.0之后的版本中，模板引擎发生变化，因此文件后缀由swig变为njk）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-inner&quot;</span>&gt;</span>   //从下面开始复制，粘贴到这里</span><br><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- require MetingJS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	<span class="comment">&lt;!--网易云--&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-id</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-fixed</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-list-folded</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-mutex</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-volume</span>=<span class="string">&quot;0.4&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">data-theme</span>=<span class="string">&quot;#FADFA3&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">date-preload</span>=<span class="string">&quot;auto&quot;</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="添加到Page左下角"><a href="#添加到Page左下角" class="headerlink" title="添加到Page左下角"></a>添加到Page左下角</h4><p>以Next主题、添加网易云音乐歌单为例。打开主题目录：<code>themes\next\layout\_layout.swig</code>，将下列代码粘贴于body或其他合适位置。其中，id&#x3D;””的双引号中填写歌单或者歌曲的id。（在Next 8.0之后的版本中，模板引擎发生变化，因此文件后缀由swig变为njk）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">autoplay</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-folded</span>=<span class="string">&quot;ture&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-max-height</span>=<span class="string">&quot;500px&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">lrc-type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此方法同样适用于使用WordPress、Typecho等框架搭建的站点。</p>
<p>相关属性及其参数请看下表。</p>
<table>
<thead>
<tr>
<th>option</th>
<th>default</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td><strong>require</strong></td>
<td>song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword</td>
</tr>
<tr>
<td>server</td>
<td><strong>require</strong></td>
<td>music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td>type</td>
<td><strong>require</strong></td>
<td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr>
<td>auto</td>
<td>options</td>
<td>music link, support: <code>netease</code>, <code>tencent</code>, <code>xiami</code></td>
</tr>
<tr>
<td>fixed</td>
<td><code>false</code></td>
<td>enable fixed mode</td>
</tr>
<tr>
<td>mini</td>
<td><code>false</code></td>
<td>enable mini mode</td>
</tr>
<tr>
<td>autoplay</td>
<td><code>false</code></td>
<td>audio autoplay</td>
</tr>
<tr>
<td>theme</td>
<td><code>#2980b9</code></td>
<td>main color</td>
</tr>
<tr>
<td>loop</td>
<td><code>all</code></td>
<td>player loop play, values: ‘all’, ‘one’, ‘none’</td>
</tr>
<tr>
<td>order</td>
<td><code>list</code></td>
<td>player play order, values: ‘list’, ‘random’</td>
</tr>
<tr>
<td>preload</td>
<td><code>auto</code></td>
<td>values: ‘none’, ‘metadata’, ‘auto’</td>
</tr>
<tr>
<td>volume</td>
<td><code>0.7</code></td>
<td>default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</td>
</tr>
<tr>
<td>mutex</td>
<td><code>true</code></td>
<td>prevent to play multiple player at the same time, pause other players when this player start play</td>
</tr>
<tr>
<td>lrc-type</td>
<td><code>0</code></td>
<td>lyric type</td>
</tr>
<tr>
<td>list-folded</td>
<td><code>false</code></td>
<td>indicate whether list should folded at first</td>
</tr>
<tr>
<td>list-max-height</td>
<td><code>340px</code></td>
<td>list max height</td>
</tr>
<tr>
<td>storage-name</td>
<td><code>metingjs</code></td>
<td>localStorage key that store player setting</td>
</tr>
</tbody></table>
<h4 id="使用-Pjax-实现全局播放背景音乐"><a href="#使用-Pjax-实现全局播放背景音乐" class="headerlink" title="使用 Pjax 实现全局播放背景音乐"></a>使用 <code>Pjax</code> 实现全局播放背景音乐</h4><p>我们实现全局播放时需要用到Pjax，Pjax是一个结合pushState和ajax技术的jQuery插件，使用它就可以实现异步改变URL内容和无刷新改变页面内容，使得浏览体验变得更为流畅快速。</p>
<p>事实上，8.0以上的Next已经自集成了Pjax，只需要在其配置文件中将Pjax项的值改为true。打开主题配置文件_config.yml，将pjax的值改为true。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># Dependencies: https:<span class="comment">//github.com/theme-next/theme-next-pjax</span></span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>

<p>否则可打开主题目录：<code>themes\next\layout\_layout.swig</code>，在head中添加以下代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>   //粘贴到这里</span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--pjax：防止跳转页面音乐暂停--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果主题没有集成Pjax，需要先安装Pjax，再对其进行启用，原理是一样的。</p>
<p>在git bash（或其他命令窗口）中执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>以查看效果。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://aplayer.js.org/#/home">Aplay官方文档</a></li>
<li><a href="https://github.com/MoOx/pjax">Pjax</a></li>
<li><a href="https://github.com/metowolf/MetingJS">MetingJS</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历方法及其Java代码实现</title>
    <url>/posts/34812bb0.html</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>二叉树的四种遍历方式：</p>
<ul>
<li>二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序依次访问二叉树中所有的结点，使得每个结点被访问依次且仅被访问一次。<br>四种遍历方式分别为：先序遍历、中序遍历、后序遍历、层序遍历。</li>
</ul>
<span id="more"></span>

<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/1542838-20190722222821663-1408544995.png"></p>
<p>遍历之前，我们首先介绍一下，如何创建一个二叉树，在这里用的是先建左树在建右树的方法，</p>
<p>首先要声明结点TreeNode类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> TreeNode leftChild;</span><br><span class="line">    <span class="keyword">public</span> TreeNode rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来创建一棵二叉树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建二叉树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list   输入序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title function_">createBinaryTree</span><span class="params">(LinkedList&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="literal">null</span> || list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">data</span> <span class="operator">=</span> list.removeFirst();</span><br><span class="line">        <span class="keyword">if</span>(data!=<span class="literal">null</span>)&#123;</span><br><span class="line">            node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(data);</span><br><span class="line">            node.leftChild = createBinaryTree(list);</span><br><span class="line">            node.rightChild = createBinaryTree(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>接下来按照上面列的顺序一一讲解，</p>
<h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>首先来看前序遍历，所谓的前序遍历就是先访问根节点，再访问左节点，最后访问右节点，</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉树前序遍历   根-&gt; 左-&gt; 右</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node    二叉树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrderTraveral(node.leftChild);</span><br><span class="line">        preOrderTraveral(node.rightChild);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>再者就是中序遍历，所谓的中序遍历就是先访问左节点，再访问根节点，最后访问右节点，</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉树中序遍历   左-&gt; 根-&gt; 右</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node   二叉树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrderTraveral(node.leftChild);</span><br><span class="line">        System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        inOrderTraveral(node.rightChild);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>最后就是后序遍历，所谓的后序遍历就是先访问左节点，再访问右节点，最后访问根节点。</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉树后序遍历   左-&gt; 右-&gt; 根</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node    二叉树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postOrderTraveral(node.leftChild);</span><br><span class="line">        postOrderTraveral(node.rightChild);</span><br><span class="line">        System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="非递归方案"><a href="#非递归方案" class="headerlink" title="非递归方案"></a>非递归方案</h5><p>讲完上面三种递归的方法，下面再给大家讲讲非递归是如何实现前中后序遍历的</p>
<p>还是一样，先看非递归前序遍历</p>
<ol>
<li>首先申请一个新的栈，记为stack；</li>
<li>声明一个结点treeNode，让其指向node结点；</li>
<li>如果treeNode的不为空，将treeNode的值打印，并将treeNode入栈，然后让treeNode指向treeNode的右结点，</li>
<li>重复步骤3，直到treenode为空；</li>
<li>然后出栈，让treeNode指向treeNode的右孩子</li>
<li>重复步骤3，直到stack为空.</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderTraveralWithStack</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="keyword">while</span>(treeNode!=<span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//迭代访问节点的左孩子，并入栈</span></span><br><span class="line">            <span class="keyword">while</span>(treeNode != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.print(treeNode.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果节点没有左孩子，则弹出栈顶节点，访问节点右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                treeNode = treeNode.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>中序遍历非递归，在此不过多叙述具体步骤了，</p>
<p>具体过程：</p>
<ol>
<li>申请一个新栈，记为stack，申请一个变量cur，初始时令treeNode为头节点；</li>
<li>先把treeNode节点压入栈中，对以treeNode节点为头的整棵子树来说，依次把整棵树的左子树压入栈中，即不断令treeNode&#x3D;treeNode.leftChild，然后重复步骤2；</li>
<li>不断重复步骤2，直到发现cur为空，此时从stack中弹出一个节点记为treeNode，打印node的值，并让treeNode&#x3D; treeNode.right，然后继续重复步骤2；</li>
<li>当stack为空并且cur为空时结束。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderTraveralWithStack</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="keyword">while</span>(treeNode!=<span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(treeNode != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                System.out.print(treeNode.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                treeNode = treeNode.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历非递归实现，后序遍历这里较前两者实现复杂一点，我们需要一个标记位来记忆我们此时节点上一个节点，具体看代码注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrderTraveralWithStack</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">lastVisit</span> <span class="operator">=</span> <span class="literal">null</span>;   <span class="comment">//标记每次遍历最后一次访问的节点</span></span><br><span class="line">        <span class="keyword">while</span>(treeNode!=<span class="literal">null</span> || !stack.isEmpty())&#123;<span class="comment">//节点不为空，结点入栈，并且指向下一个左孩子</span></span><br><span class="line">            <span class="keyword">while</span>(treeNode!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//栈不为空</span></span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                <span class="comment">//出栈</span></span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 这块就是判断treeNode是否有右孩子，</span></span><br><span class="line"><span class="comment">                 * 如果没有输出treeNode.data，让lastVisit指向treeNode，并让treeNode为空</span></span><br><span class="line"><span class="comment">                 * 如果有右孩子，将当前节点继续入栈，treeNode指向它的右孩子,继续重复循环</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(treeNode.rightChild == <span class="literal">null</span> || treeNode.rightChild == lastVisit) &#123;</span><br><span class="line">                    System.out.print(treeNode.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    lastVisit = treeNode;</span><br><span class="line">                    treeNode  = <span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    stack.push(treeNode);</span><br><span class="line">                    treeNode = treeNode.rightChild;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后再给大家介绍一下层序遍历</p>
<p>具体步骤如下：</p>
<ol>
<li>首先申请一个新的队列，记为queue；</li>
<li>将头结点head压入queue中；</li>
<li>每次从queue中出队，记为node，然后打印node值，如果node左孩子不为空，则将左孩子入队；如果node的右孩子不为空，则将右孩子入队；</li>
<li>重复步骤3，直到queue为空。</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            root = queue.pop();</span><br><span class="line">            System.out.print(root.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(root.leftChild!=<span class="literal">null</span>) queue.add(root.leftChild);</span><br><span class="line">            <span class="keyword">if</span>(root.rightChild!=<span class="literal">null</span>) queue.add(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中适配APlayer和Waline的深色模式体验</title>
    <url>/posts/c05c62e8.html</url>
    <content><![CDATA[<p>使用DarkMode.js实现深色模式后，发现第三方组件如APlayer音乐播放器和Waline评论系统并不能自动适配深色模式，这会导致深色模式下的显示效果不统一。</p>
<span id="more"></span>

<h2 id="启用DarkMode-js"><a href="#启用DarkMode-js" class="headerlink" title="启用DarkMode.js"></a>启用DarkMode.js</h2><p>可通过以下配置启用深色模式开关：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在_config.yml中配置</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">darkmode_js:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">bottom:</span> <span class="string">&#x27;130px&#x27;</span>  <span class="comment"># 取消底部定位</span></span><br><span class="line">    <span class="attr">right:</span> <span class="string">&#x27;unset&#x27;</span>   <span class="comment"># 取消右侧定位</span></span><br><span class="line">    <span class="attr">left:</span> <span class="string">&#x27;32px&#x27;</span>     <span class="comment"># 左侧位置</span></span><br><span class="line">    <span class="attr">top:</span> <span class="string">&#x27;unset&#x27;</span>     </span><br><span class="line">    <span class="attr">time:</span> <span class="string">&#x27;0.5s&#x27;</span></span><br><span class="line">    <span class="attr">mixColor:</span> <span class="string">&#x27;transparent&#x27;</span></span><br><span class="line">    <span class="attr">backgroundColor:</span> <span class="string">&#x27;transparent&#x27;</span></span><br><span class="line">    <span class="attr">buttonColorDark:</span> <span class="string">&#x27;#100f2c&#x27;</span></span><br><span class="line">    <span class="attr">buttonColorLight:</span> <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">    <span class="attr">isActivated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">saveInCookies:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">&#x27;🌓&#x27;</span></span><br><span class="line">    <span class="attr">autoMatchOsTheme:</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 确保pjax开启，以支持暗黑模式</span></span><br><span class="line">  <span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="APlayer深色模式适配"><a href="#APlayer深色模式适配" class="headerlink" title="APlayer深色模式适配"></a>APlayer深色模式适配</h2><h3 id="APlayer基础代码"><a href="#APlayer基础代码" class="headerlink" title="APlayer基础代码"></a>APlayer基础代码</h3><p>在<code>source/_data/footer.njk</code>中添加APlayer的基础代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/colorthief@2.3.2/dist/color-thief.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">mini</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;你的歌单ID&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autoplay</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">theme</span>=<span class="string">&quot;#e9e9e9&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">list-folded</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">list-max-height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自适应主题色脚本"><a href="#自适应主题色脚本" class="headerlink" title="自适应主题色脚本"></a>自适应主题色脚本</h3><p>实现根据封面图片自动设置主题色：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 等待APlayer加载完成</span></span><br><span class="line">  <span class="keyword">const</span> checkAplayer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> aplayers !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; aplayers.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(checkAplayer);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取APlayer实例</span></span><br><span class="line">      <span class="keyword">const</span> ap = aplayers[<span class="number">0</span>];</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 初始化ColorThief</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">ColorThief</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> colorThief = <span class="keyword">new</span> <span class="title class_">ColorThief</span>();</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置主题色函数</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">setTheme</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!ap.<span class="property">list</span>.<span class="property">audios</span>[index].<span class="property">theme</span>) &#123;</span><br><span class="line">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">let</span> coverUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">              image.<span class="property">crossOrigin</span> = <span class="string">&#x27;Anonymous&#x27;</span>;</span><br><span class="line">              image.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="keyword">let</span> color = colorThief.<span class="title function_">getColor</span>(image);</span><br><span class="line">                  ap.<span class="title function_">theme</span>(<span class="string">`rgb(<span class="subst">$&#123;color[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">1</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">2</span>]&#125;</span>)`</span>, index);</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置主题色: rgb(<span class="subst">$&#123;color[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">1</span>]&#125;</span>, <span class="subst">$&#123;color[<span class="number">2</span>]&#125;</span>)`</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取主题色失败:&#x27;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(coverUrl);</span><br><span class="line">              &#125;;</span><br><span class="line">              image.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;封面图片加载失败&#x27;</span>);</span><br><span class="line">                <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(coverUrl);</span><br><span class="line">              &#125;;</span><br><span class="line">              image.<span class="property">src</span> = coverUrl;</span><br><span class="line">            &#125;;</span><br><span class="line">            xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取封面失败&#x27;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, ap.<span class="property">list</span>.<span class="property">audios</span>[index].<span class="property">cover</span>, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">            xhr.<span class="title function_">send</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始曲目设置主题色</span></span><br><span class="line">        <span class="keyword">if</span> (ap.<span class="property">list</span> &amp;&amp; ap.<span class="property">list</span>.<span class="property">index</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="title function_">setTheme</span>(ap.<span class="property">list</span>.<span class="property">index</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 切换曲目时自动更新主题色</span></span><br><span class="line">        ap.<span class="title function_">on</span>(<span class="string">&#x27;listswitch&#x27;</span>, <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setTheme</span>(index);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="添加深色模式CSS样式"><a href="#添加深色模式CSS样式" class="headerlink" title="添加深色模式CSS样式"></a>添加深色模式CSS样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1001</span> <span class="meta">!important</span>; <span class="comment">/* 提高z-index确保在darkmode按钮之上 */</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span> <span class="meta">!important</span>; <span class="comment">/* 离底部距离 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-list</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span> <span class="meta">!important</span>; </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 确保APlayer在暗黑模式下歌曲名称颜色不变 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新增针对标题的专门样式 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-title</span>,</span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-class">.aplayer-list-author</span>,</span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-class">.aplayer-list-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span> <span class="meta">!important</span>;</span><br><span class="line">  -webkit-<span class="selector-tag">text</span>-<span class="attribute">fill</span>-<span class="attribute">color</span>: <span class="number">#000</span> <span class="meta">!important</span>; <span class="comment">/* 覆盖渐变文本效果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高亮选中的曲目 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-class">.aplayer-list-light</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span> <span class="meta">!important</span>; <span class="comment">/* 保持选中曲目的背景色为浅色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置列表背景色为白色，避免深色模式影响 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调整暗黑模式按钮的样式 */</span></span><br><span class="line"><span class="selector-class">.darkmode-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span> <span class="meta">!important</span>; <span class="comment">/* 确保按钮在高层但低于APlayer列表 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为暗黑模式按钮添加背景和阴影，使其更明显 */</span></span><br><span class="line"><span class="selector-class">.darkmode-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 暗黑模式下 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.darkmode-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">0.8</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-list</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新增暗黑模式歌词样式修复 */</span></span><br><span class="line"><span class="selector-class">.darkmode--activated</span> <span class="selector-class">.aplayer-lrc-contents</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e0e0e0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Waline评论系统深色模式适配"><a href="#Waline评论系统深色模式适配" class="headerlink" title="Waline评论系统深色模式适配"></a>Waline评论系统深色模式适配</h2><h3 id="配置Waline的深色模式选择器"><a href="#配置Waline的深色模式选择器" class="headerlink" title="配置Waline的深色模式选择器"></a>配置Waline的深色模式选择器</h3><p>在<code>_config.yml</code>中，指定Waline的深色模式选择器：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">serverURL:</span> <span class="string">你的Waline服务器URL</span></span><br><span class="line">  <span class="comment"># 更改暗黑模式的配置方式</span></span><br><span class="line">  <span class="attr">dark:</span> <span class="string">&#x27;html[data-darkmode]&#x27;</span></span><br><span class="line">  <span class="comment"># 其他配置...</span></span><br></pre></td></tr></table></figure>

<h3 id="Waline深色模式样式"><a href="#Waline深色模式样式" class="headerlink" title="Waline深色模式样式"></a>Waline深色模式样式</h3><p>在<code>source/_data/styles.styl</code>中添加以下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 强制覆盖Waline主题颜色</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--waline-theme-color</span>: <span class="number">#3498db</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--waline-active-color</span>: <span class="number">#2980b9</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--waline-bgcolor</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--waline-bgcolor-light</span>: <span class="number">#f8f8f8</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--waline-border-color</span>: <span class="number">#ddd</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--waline-color</span>: <span class="number">#444</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 完全强制覆盖元素样式</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-panel</span>, </span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-card</span>, </span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-editor</span>,</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-header</span>,</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-input</span>,</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> <span class="selector-class">.wl-textarea</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ddd</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 暗黑模式下Waline样式</span><br><span class="line"><span class="selector-class">.darkmode--activated</span> &#123;</span><br><span class="line">  // 强制覆盖所有Waline元素样式</span><br><span class="line">  <span class="selector-class">.wl-panel</span>, <span class="selector-class">.wl-card</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#222</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#444</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 评论内容</span><br><span class="line">  <span class="selector-class">.wl-content</span> <span class="selector-tag">p</span>, <span class="selector-class">.wl-content</span> <span class="selector-tag">span</span>, <span class="selector-class">.wl-meta</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 输入框</span><br><span class="line">  <span class="selector-class">.wl-editor</span>, <span class="selector-class">.wl-input</span>, <span class="selector-class">.wl-textarea</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 按钮</span><br><span class="line">  <span class="selector-class">.wl-btn</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#3498db</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Waline强制样式脚本"><a href="#Waline强制样式脚本" class="headerlink" title="Waline强制样式脚本"></a>Waline强制样式脚本</h3><p>在<code>source/_data/body-end.njk</code>中添加脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 等待Waline元素加载完成</span></span><br><span class="line">  <span class="keyword">const</span> checkWaline = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> walineEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wl-panel&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (walineEl) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(checkWaline);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 监听暗黑模式变化，强制更新评论区样式</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">darkmode</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">darkmode</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> isDark = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;darkmode--activated&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (isDark) &#123;</span><br><span class="line">              <span class="comment">// 直接修改DOM元素样式</span></span><br><span class="line">              <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.wl-panel, .wl-card&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;#222&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;border-color&#x27;</span>, <span class="string">&#x27;#444&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">              </span><br><span class="line">              <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.wl-editor, .wl-input, .wl-textarea&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;#333&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#ddd&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;border-color&#x27;</span>, <span class="string">&#x27;#555&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">              </span><br><span class="line">              <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.wl-content, .wl-meta, .wl-meta span, .wl-meta a&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#ccc&#x27;</span>, <span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>期末预测之最佳阈值 202012-2</title>
    <url>/posts/e7a7ed06.html</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>考虑到安全指数是一个较大范围内的整数、小菜很可能搞不清楚自己是否真的安全，顿顿决定设置一个阈值 $θ$，以便将安全指数 $y$  转化为一个具体的预测结果——“会挂科”或“不会挂科”。</p>
<p>因为安全指数越高表明小菜同学挂科的可能性越低，所以当$y≥θ$  时，顿顿会预测小菜这学期很安全、不会挂科；反之若 $y&lt;θ$ ，顿顿就会劝诫小菜：“你期末要挂科了，勿谓言之不预也。”</p>
<p>那么这个阈值该如何设定呢？顿顿准备从过往中寻找答案。</p>
<span id="more"></span>

<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体来说，顿顿评估了 $m$ 位同学上学期的安全指数，其中第$  i$ （$1≤i≤m$ ）位同学的安全指数为$y_i$，是一个 ([$0,10^8$]) 范围内的整数；同时，该同学上学期的挂科情况记作 ($ result_i$ ∈0,1)，其中 0 表示挂科、1 表示未挂科。</p>
<p>相应地，顿顿用$ predict_θ(y)$ 表示根据阈值 θ 将安全指数 y 转化为的具体预测结果。</p>
<p>如果 $predict_θ(y_j) $与$ result_j$相同，则说明阈值为 θ 时顿顿对第 j 位同学是否挂科预测正确；不同则说明预测错误。</p>
<p>最后，顿顿设计了如下公式来计算最佳阈值 θ∗：</p>
<p>$θ^* &#x3D; \max { \mathop{\mathrm{argmax} }\limits_{\theta \in { y_i } } \sum\limits_{j&#x3D;1}^{m} ( \mathrm{predict}_{\theta} ( y_j ) &#x3D;&#x3D; result_j ) }<br>$</p>
<p>该公式亦可等价地表述为如下规则：</p>
<ol>
<li>最佳阈值仅在$y_i$中选取，即与某位同学的安全指数相同；</li>
<li>按照该阈值对这 $ m $ 位同学上学期的挂科情况进行预测，预测正确的次数最多（即准确率最高）；</li>
<li>多个阈值均可以达到最高准确率时，选取其中最大的。</li>
</ol>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>从标准输入读入数据。</p>
<p>输入的第一行包含一个正整数$m$ 。</p>
<p>接下来输入$m$ 行，其中第$i$ （$1≤i≤m$ ）行包括用空格分隔的两个整数$y_i$和$ result_i$，含义如上文所述。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出到标准输出。</p>
<p>输出一个整数，表示最佳阈值$θ^*$。</p>
<p>样例1输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">1 1</span><br><span class="line">3 1</span><br><span class="line">5 1</span><br><span class="line">7 1</span><br></pre></td></tr></table></figure>

<p>样例1输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>样例1解释</p>
<p>按照规则一，最佳阈值的选取范围为 0,1,3,5,7。</p>
<p>θ&#x3D;0 时，预测正确次数为 4；</p>
<p>θ&#x3D;1 时，预测正确次数为 5；</p>
<p>θ&#x3D;3 时，预测正确次数为 5；</p>
<p>θ&#x3D;5 时，预测正确次数为 4；</p>
<p>θ&#x3D;7 时，预测正确次数为 3。</p>
<p>阈值选取为 1 或 3 时，预测准确率最高；</p>
<p>所以按照规则二，最佳阈值的选取范围缩小为 1,3。</p>
<p>依规则三，$θ^*&#x3D;max1,3&#x3D;3$。</p>
<p>样例2输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">5 1</span><br><span class="line">5 0</span><br><span class="line">5 0</span><br><span class="line">2 1</span><br><span class="line">3 0</span><br><span class="line">4 0</span><br><span class="line">100000000 1</span><br><span class="line">1 0</span><br></pre></td></tr></table></figure>

<p>样例2输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100000000</span><br></pre></td></tr></table></figure>

<h2 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h2><p>70% 的测试数据保证 ($m≤200$)；</p>
<p>全部的测试数据保证 ($2≤m≤10^5$)。</p>
<h2 id="解答（Dev-CPP环境）"><a href="#解答（Dev-CPP环境）" class="headerlink" title="解答（Dev-CPP环境）"></a>解答（Dev-CPP环境）</h2><p>答案源自<a href="https://blog.csdn.net/qq_43464088/article/details/112080044">CCF-CSP 202012-2 期末预测之最佳阈值（前缀和、set去重、代码极简）_AngleCavalier的博客-CSDN博客_期末预测之最佳阈值前缀和</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">int</span> n,Max=<span class="number">0</span>,res;</span><br><span class="line"><span class="type">int</span> sum[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;st;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pr[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> a,b;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		pr[i]=<span class="built_in">make_pair</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(pr<span class="number">+1</span>,pr+n<span class="number">+1</span>);<span class="comment">//1.先排序</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		sum[i] =sum[i<span class="number">-1</span>]+ pr[i].second;<span class="comment">//2.求挂科情况前缀和 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> a=pr[i].first;<span class="comment">//选取阈值 </span></span><br><span class="line">		<span class="keyword">if</span>(st.<span class="built_in">count</span>(a)) <span class="keyword">continue</span>;<span class="comment">//set去重 </span></span><br><span class="line">		st.<span class="built_in">insert</span>(a);</span><br><span class="line">		<span class="type">int</span> yuce1 = sum[n]-sum[i<span class="number">-1</span>];<span class="comment">//大于等于阈值时，应统计预测结果中为1的个数 </span></span><br><span class="line">		<span class="type">int</span> yuce0 = i<span class="number">-1</span>-sum[i<span class="number">-1</span>];<span class="comment">//小与阈值时，应统计预测结果中为0的个数 </span></span><br><span class="line">		<span class="type">int</span> yuce = yuce1+ yuce0;<span class="comment">//合计预测正确次数 </span></span><br><span class="line">		<span class="keyword">if</span>(yuce &gt;= Max) &#123;</span><br><span class="line">			Max=yuce;</span><br><span class="line">			res=a;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="常规错误答案"><a href="#常规错误答案" class="headerlink" title="常规错误答案"></a>常规错误答案</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> m,max,maxi=<span class="number">-1</span>,theta=<span class="number">0</span>,i,p=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> pre[<span class="number">100001</span>],res[<span class="number">100001</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">	<span class="keyword">while</span>(p&lt;m)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pre[p],&amp;res[p]);</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(p=<span class="number">0</span>;p&lt;m;p++)&#123;</span><br><span class="line">		max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(pre[i]&gt;=pre[p]&amp;&amp;res[i]==<span class="number">1</span>)&#123;</span><br><span class="line">				max++;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pre[i]&lt;pre[p]&amp;&amp;res[i]==<span class="number">0</span>)&#123;</span><br><span class="line">				max++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(max&gt;maxi)&#123;</span><br><span class="line">			theta=pre[p];</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(max==maxi&amp;&amp;theta&lt;pre[p])&#123;</span><br><span class="line">			theta=pre[p];</span><br><span class="line">		&#125;</span><br><span class="line">		maxi=max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,theta);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>期末预测之安全指数 202012-1</title>
    <url>/posts/d9ae96d3.html</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a><strong>题目背景</strong></h2><p>   期末要到了，小菜同学找到了自己的好朋友顿顿，希望可以预测一下自己这学期是否会挂科。</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>   首先，顿顿选取了如“课堂表现”、“自习时长”、“作业得分”、“社团活动参与度”等 项指标作为预测的依据。<br>   然后，顿顿根据自己平日里对小菜的暗中观察，以百分制给每一项指标打分，即小菜同学第$ i（1≤i≤n）$项指标的得分$score_i$ 是一个 $[0, 100]$范围内的整数。<br>   鉴于每一项指标的重要性不尽相同，顿顿用一个$ [-10, 10] $范围内的整数 $w_i$来表示第$ i（1≤i≤n）$项指标的重要程度。<br>   最后，小菜同学期末的安全指数$ y $定义如下：<br><img data-src="https://img-blog.csdnimg.cn/20201229233253886.png" alt="p1"></p>
<span id="more"></span>

<p>   其中$ ReLU(x) &#x3D; max(0,x) $是一种常见的激活函数。<br>   因为使用了$ ReLU $函数，安全指数一定是个非负值。<br>   如果安全指数过低（甚至为零)，则说明小菜同学这学期很可能要挂科了……<br>   已知每一项指标的重要程度 $w_i$和相应的得分 $score_i$ ，快来算算小菜同学期末的安全指数吧。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h2><p>   从标准输入读入数据。<br>   输入的第一行包含一个正整数 n，保证 2≤n≤$10^5$。<br>   接下来输入 n 行，其中第 i（1≤i≤n)行包含用空格分隔的两个整数 $w_i$ 和$score_i$  ，分别表示第 i 项指标的重要程度和小菜同学该项的得分。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h2><p>   输出到标准输出。<br>   输出一个非负整数 $y$，表示小菜同学期末的安全指数。</p>
<h2 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a><strong>样例1</strong></h2><p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">2 60</span><br><span class="line">10 100</span><br><span class="line">0 70</span><br><span class="line">0 0</span><br><span class="line">-10 50</span><br><span class="line">10 60</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1220</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>解释<br><img data-src="https://img-blog.csdnimg.cn/20201229234402643.png" alt="p2"></p>
<h2 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a><strong>样例2</strong></h2><p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">-10 100</span><br><span class="line">-1 15</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>解释<br><img data-src="https://img-blog.csdnimg.cn/2020122923461377.png" alt="p3"></p>
<h2 id="解答（Dev-CPP环境）"><a href="#解答（Dev-CPP环境）" class="headerlink" title="解答（Dev-CPP环境）"></a>解答（Dev-CPP环境）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> n,ReLU=<span class="number">0</span>,score,w;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;score,&amp;w);</span><br><span class="line">		ReLU=ReLU+score*w;</span><br><span class="line">		n--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ReLU&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">		ReLU=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ReLU);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>海明码的编码和校验方法</title>
    <url>/posts/51bf9fa7.html</url>
    <content><![CDATA[<p>海明码（也叫汉明码）具有一位纠错能力。本文以1010110这个二进制数为例解释海明码的编码和校验方法。</p>
<span id="more"></span>

<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><h5 id="确定校验码的位数x"><a href="#确定校验码的位数x" class="headerlink" title="确定校验码的位数x"></a>确定校验码的位数x</h5><p>设数据有n位，校验码有x位。则校验码一共有2ˣ种取值方式。其中需要一种取值方式表示数据正确，剩下2ˣ-1种取值方式表示有一位数据出错。因为编码后的二进制串有n+x位，因此x应该满足<br>$$<br>2ˣ-1 ≥　n+x　<br>$$<br>使不等式成立的x的最小值就是校验码的位数。在本例中，n&#x3D;7，解得x&#x3D;4。</p>
<h5 id="确定校验码的位置"><a href="#确定校验码的位置" class="headerlink" title="确定校验码的位置"></a>确定校验码的位置</h5><p>校验码在二进制串中的位置为2的整数幂。剩下的位置为数据。如图所示。</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>x1</td>
<td>x2</td>
<td>1</td>
<td>x3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>x4</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<h5 id="求出校验位的值"><a href="#求出校验位的值" class="headerlink" title="求出校验位的值"></a>求出校验位的值</h5><p>以求x2的值为例。为了直观，将表格中的位置用二进制表示。</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>0001</th>
<th>0010</th>
<th>0011</th>
<th>0100</th>
<th>0101</th>
<th>0110</th>
<th>0111</th>
<th>1000</th>
<th>1001</th>
<th>1010</th>
<th>1011</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>x1</td>
<td><strong>x2</strong></td>
<td><strong>1</strong></td>
<td>x3</td>
<td>0</td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
<td>x4</td>
<td>1</td>
<td><strong>1</strong></td>
<td><strong>0</strong></td>
</tr>
</tbody></table>
<p>为了求出x2,要使所有位置的第二位是1的数据（即形如* * 1 *的位置的数据）的异或值为0。即x2^1^1^0^1^0 &#x3D; 0。因此x2 &#x3D; 1。</p>
<p>同理可得x1 &#x3D; 0, x3 &#x3D; 1, x4 &#x3D; 0。</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>0001</th>
<th>0010</th>
<th>0011</th>
<th>0100</th>
<th>0101</th>
<th>0110</th>
<th>0111</th>
<th>1000</th>
<th>1001</th>
<th>1010</th>
<th>1011</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<p>因此1010110的海明码为01110100110。</p>
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><p>假设位置为1011的数据由0变成了1，校验过程为：</p>
<p>　　将所有位置形如 * *  * 1 ,  * * 1 * ,  * 1 *  *  ,  1 * * * 的数据分别异或。</p>
<p>　　* * * 1 : 0^1^0^0^1^1 &#x3D; 1</p>
<p>　　* * 1 * : 1^1^1^0^1^1 &#x3D; 1</p>
<p>　　* 1 * * : 1^0^1^0 &#x3D; 0</p>
<p>　　1 * * * : 0^1^1^1 &#x3D; 1</p>
<p>　　以上四组中，如果一组异或值为1，说明该组中有数据出错了。* * * 1 、* * 1 * 、 1 * * * 的异或都为1，说明出错数据的位置为1011。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/scrutable/p/6052127.html">海明码的编码和校验方法 - acquisitive - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>未初始化警告 202203-1</title>
    <url>/posts/45202b01.html</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>一个未经初始化的变量，里面存储的值可能是任意的。因此直接使用未初始化的变量，比如将其赋值给另一个变量，并不符合一般的编程逻辑。代码中出现这种情况，往往是因为遗漏了初始化语句、或是打错了变量名。对代码中使用了未初始化变量的语句进行检查，可以方便地排查出代码中的一些隐秘 Bug。</p>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>考虑一段包含$ k $条赋值语句的简单代码。该段代码最多使用到$ n $个变量，分别记作$ a_1,a_2,⋯,a_n$；该段代码使用的常量均记作$a_0$。</p>
<p>第$ i $条$（1≤i≤k）$赋值语句为$a_{xi}&#x3D;a_{yi}$，满足$1≤xi≤n、0≤yi≤n$，表示将$a_{yi} $的值赋给变量$a_{xi}$。其中 $a_{xi}$ 被称为该赋值语句的<strong>左值</strong>，一定是个变量；$a_{yi}$ 被称为<strong>右值</strong>，可以是一个常量或变量。</p>
<p>对于任意一条赋值语句 $a_{xi}&#x3D;a_{yi}$，如果右值 $a_{yi}$ 是一个变量，则其应该在此之前被初始化过。<br>具体来说，如果变量 $a_{yi}$ 在前 $i−1$ 条赋值语句中做为<strong>左值</strong>出现过，即存在 $j&lt;i$ 满足 $xj&#x3D;yi$（这里无需考虑第 $j$ 条赋值语句本身是否也有右值未初始化的问题），我们就认为在第 i 条赋值语句中 $a_{yi}$ 已被初始化；<br>否则，我们认为该条语句存在右值未初始化的问题。</p>
<p>按照上述规则，试统计给定的代码中，有多少条赋值语句右值未被初始化。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行包含空格分隔的两个正整数$n、k$，分别表示变量的数量和赋值语句的条数。</p>
<p>接下来输入$ k $行，其中第$ i $行$（1≤i≤k）$包含空格分隔的两个正整数$ xi、yi$，表示第$ i $条赋值语句。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示有右值未被初始化问题的赋值语句条数。</p>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 7</span><br><span class="line">1 2</span><br><span class="line">3 3</span><br><span class="line">3 0</span><br><span class="line">3 3</span><br><span class="line">6 2</span><br><span class="line">2 1</span><br><span class="line">8 2</span><br></pre></td></tr></table></figure>

<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>其中第一、二、五条赋值语句右值未被初始化。</p>
<h2 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h2><p>50% 的测试数据满足$ 0&lt;n,k≤1000$；</p>
<p>全部的测试数据满足$ 0&lt;n,k≤10^5$ 。</p>
<h2 id="解答（Dev-CPP环境）"><a href="#解答（Dev-CPP环境）" class="headerlink" title="解答（Dev-CPP环境）"></a>解答（Dev-CPP环境）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> state[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k,i,ans=<span class="number">0</span>;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> left,right;</span><br><span class="line">	state[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i++&lt;k)&#123;</span><br><span class="line">		cin&gt;&gt;left&gt;&gt;right;</span><br><span class="line">		<span class="keyword">if</span>(state[right]==<span class="number">0</span>)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		state[left]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>王道数据结构P191关于二叉树的算法归纳</title>
    <url>/posts/1537acf2.html</url>
    <content><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本文是王道数据结构P191的10个算法例题归纳，二叉树的存储结构为二叉链表。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="统计二叉树中度为1的结点个数"><a href="#统计二叉树中度为1的结点个数" class="headerlink" title="统计二叉树中度为1的结点个数"></a>统计二叉树中度为1的结点个数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">NodeCount1</span><span class="params">( BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchild!=<span class="literal">NULL</span>||T-&gt;rchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+NodeCount1(T-&gt;lchild)+NodeCount1(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NodeCount1(T-&gt;lchild)+NodeCount1(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给定一个二叉树，当根仅具有一个孩子时，代表根度为1，统计一次并递归寻找子树度为1的根；当根有两个孩子，不统计递归寻找子树度为1的根。</p>
<p>也可以用非递归方法，使用队列层次遍历。</p>
<h2 id="统计二叉树中度为2的结点个数"><a href="#统计二叉树中度为2的结点个数" class="headerlink" title="统计二叉树中度为2的结点个数"></a>统计二叉树中度为2的结点个数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">NodeCount2</span><span class="params">( BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchild!=<span class="literal">NULL</span>||T-&gt;rchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> NodeCount2(T-&gt;lchild)+NodeCount2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+NodeCount2(T-&gt;lchild)+NodeCount2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="统计二叉树中度为0的结点个数"><a href="#统计二叉树中度为0的结点个数" class="headerlink" title="统计二叉树中度为0的结点个数"></a>统计二叉树中度为0的结点个数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">NodeCount0</span><span class="params">( BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NodeCount0(T-&gt;lchild)+NodeCount0(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="统计二叉树的高度"><a href="#统计二叉树的高度" class="headerlink" title="统计二叉树的高度"></a>统计二叉树的高度</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Height</span><span class="params">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ldep = Height(T-&gt;lchild);	<span class="comment">//结点左子树高度</span></span><br><span class="line">	<span class="type">int</span> rdep = Height(T-&gt;rchild);	<span class="comment">//结点右子树高度</span></span><br><span class="line">	<span class="keyword">if</span> (ldep &gt; rdep)	<span class="comment">//取二者中更大的+1即树的高度，+1是因为根结点算一层</span></span><br><span class="line">		<span class="keyword">return</span> ldep + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> rdep + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="统计二叉树的宽度"><a href="#统计二叉树的宽度" class="headerlink" title="统计二叉树的宽度"></a>统计二叉树的宽度</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelWidth</span><span class="params">(BiTree T, <span class="type">int</span> a[], <span class="type">int</span> h)</span>	<span class="comment">//求每一层的宽度</span></span><br><span class="line">&#123;	<span class="comment">//第一次调用为LevelWidth(T,a,1);</span></span><br><span class="line">	<span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[h] += <span class="number">1</span>;</span><br><span class="line">		LevelWidth(T-&gt;lchild, a, h + <span class="number">1</span>);</span><br><span class="line">		LevelWidth(T-&gt;rchild, a, h + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Width</span><span class="params">(BiTree T)</span>	</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a[MaxSize + <span class="number">1</span>], h = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= MaxSize; i++)</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	LevelWidth(T, a, h);	<span class="comment">//调用求每一层宽度的函数，把宽度保存在数组a[]里</span></span><br><span class="line">	<span class="type">int</span> wid = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= MaxSize; i++)	<span class="comment">//遍历数组a[i]求最大值，即树的宽度</span></span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; wid) </span><br><span class="line">			wid = a[i];</span><br><span class="line">	<span class="keyword">return</span> wid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从二叉树中删去所有的叶结点"><a href="#从二叉树中删去所有的叶结点" class="headerlink" title="从二叉树中删去所有的叶结点"></a>从二叉树中删去所有的叶结点</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Del_0</span><span class="params">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">	BiTNode *p = T;</span><br><span class="line">	<span class="keyword">if</span>((p-&gt;lchild ==<span class="literal">NULL</span>&amp;&amp; p-&gt;rchild ==<span class="literal">NULL</span>)|| p ==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild-&gt;lchild ==<span class="literal">NULL</span>&amp;&amp; p-&gt;lchild-&gt;rchlid ==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(p-&gt;lchild);</span><br><span class="line">  		p-&gt;lchild =<span class="literal">NULL</span>;<span class="comment">//⽗节点左孩⼦指针置空</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;rchild-&gt;lchild ==<span class="literal">NULL</span>&amp;&amp; p-&gt;rchild-&gt;rchlid ==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(p-&gt;rchild);</span><br><span class="line">    	p-&gt;rchild =<span class="literal">NULL</span>;<span class="comment">//⽗节点右孩⼦指针置空</span></span><br><span class="line">	&#125;</span><br><span class="line">	Del_0(T-&gt;lchild);</span><br><span class="line">	Del_0(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先叶子是指左右孩子都没有的结点。</p>
<p>注意此代码为递归，只会向内层深⼊，所以删除完叶⼦结点，使原分⽀结点变为叶⼦结点，但不会再继续删除。</p>
<h2 id="计算指定结点-p所在的层次"><a href="#计算指定结点-p所在的层次" class="headerlink" title="计算指定结点*p所在的层次"></a>计算指定结点*p所在的层次</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetLevel</span><span class="params">(BiTree T, BiTNode *p)</span>		<span class="comment">//计算指定结点*p所在的层次</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (T == p)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;	<span class="comment">//找到所在层,第一层</span></span><br><span class="line">	<span class="type">int</span> depl = GetLevel(T-&gt;lchild, p);</span><br><span class="line">	<span class="type">int</span> depr = GetLevel(T-&gt;rchild, p);</span><br><span class="line">	<span class="keyword">if</span> (depl || depr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (depl &gt; depr)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> + depl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> + depr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算二叉树中各结点中最大元素的值"><a href="#计算二叉树中各结点中最大元素的值" class="headerlink" title="计算二叉树中各结点中最大元素的值"></a>计算二叉树中各结点中最大元素的值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Get_Max</span><span class="params">(BiTree T)</span>	</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> maxl = Get_Max(T-&gt;lchild);</span><br><span class="line">	<span class="type">int</span> maxr = Get_Max(T-&gt;rchild);</span><br><span class="line">	<span class="type">int</span> max = maxl &gt; maxr ? maxl : maxr;	<span class="comment">//max为maxl和maxr中更大的一个</span></span><br><span class="line">	<span class="keyword">return</span> max &gt; T-&gt;data ? max : T-&gt;data;	<span class="comment">//返回值为max和T-&gt;data中更大的一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="交换二叉树中每个结点的两个子女"><a href="#交换二叉树中每个结点的两个子女" class="headerlink" title="交换二叉树中每个结点的两个子女"></a>交换二叉树中每个结点的两个子女</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Exc</span><span class="params">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">		Exc(T-&gt;lchild);</span><br><span class="line">	<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">		Exc(T-&gt;rchild);</span><br><span class="line">	BiTNode *p;</span><br><span class="line">	p = T-&gt;lchild;</span><br><span class="line">	T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">	T-&gt;rchild = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="以先序次序输出一颗二叉树中所有结点"><a href="#以先序次序输出一颗二叉树中所有结点" class="headerlink" title="以先序次序输出一颗二叉树中所有结点"></a>以先序次序输出一颗二叉树中所有结点</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreAndLevel</span><span class="params">(BiTree T, <span class="type">int</span> i)</span>	</span><br><span class="line">&#123;		<span class="comment">//第一次调用为PreAndLevel(T, 1);</span></span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data=%d，level=%d&quot;</span>, T-&gt;data, i);</span><br><span class="line">		PreAndLevel(T-&gt;lchild, i + <span class="number">1</span>);</span><br><span class="line">		PreAndLevel(T-&gt;rchild, i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>部分题解答源自 <a href="https://blog.csdn.net/qq_36645322?type=blog"> 霸道总裁爱上网的博客_CSDN博客-c++,算法,安卓领域博主</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>称检测点查询 202009-1</title>
    <url>/posts/3b542d1c.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>2020 年 6 月 8 日，国务院联防联控机制发布《关于加快推进新冠病毒核酸检测的实施意见》，提出对“密切接触者”等八类重点人群“应检尽检”，其他人群“愿检尽检”。<br>某市设有$n$个核酸检测点，编号从$1$到$n$，其中$i$号检测点的位置可以表示为一个平面整数坐标$(x_i, y_i)$。<br>为方便预约核酸检测，请根据市民所在位置$(X, Y)$，查询距其最近的三个检测点。<br>多个检测点距离相同时，编号较小的视为更近。</p>
<span id="more"></span>

<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入共$n+1$行。<br>第一行包含用空格分隔的三个整数$n、X$和$Y$，表示检测点总数和市民所在位置。<br>第二行到第$n+1$行依次输入$n$个检测点的坐标。第$i+1$行$（1≤i≤n）$包含用空格分隔的两个整数$x_i$和$y_i$，表示$i$号检测点所在位置。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出共三行，按距离从近到远，依次输出距离该市民最近的三个检测点编号。</p>
<h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 2 2</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure>

<h2 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 0 1</span><br><span class="line">-1 0</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 2</span><br><span class="line">-1 2</span><br></pre></td></tr></table></figure>

<h2 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="样例2解释："><a href="#样例2解释：" class="headerlink" title="样例2解释："></a>样例2解释：</h2><p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/Require.png"></p>
<h2 id="解答（Dev-CPP环境）"><a href="#解答（Dev-CPP环境）" class="headerlink" title="解答（Dev-CPP环境）"></a>解答（Dev-CPP环境）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">int</span> dis;</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> id,<span class="type">int</span> dis)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;id=id;</span><br><span class="line">		<span class="keyword">this</span>-&gt;dis=dis;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> X,<span class="type">int</span> Y,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (X-x)*(X-x)+(Y-y)*(Y-y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point p1,Point p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p<span class="number">1.</span>dis==p<span class="number">2.</span>dis)&#123;</span><br><span class="line">		<span class="keyword">return</span> p<span class="number">1.</span>id&lt;p<span class="number">2.</span>id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p<span class="number">1.</span>dis&lt;p<span class="number">2.</span>dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,X,Y,px,py,d;</span><br><span class="line">	vector&lt;Point&gt; points;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;X&gt;&gt;Y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;px&gt;&gt;py;</span><br><span class="line">		d=<span class="built_in">calc</span>(X,Y,px,py);</span><br><span class="line">		points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(i<span class="number">+1</span>,d));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(points.<span class="built_in">begin</span>(),points.<span class="built_in">end</span>(),cmp);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">		cout&lt;&lt;points[i].id&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>评价《脑髓地狱》</title>
    <url>/posts/2b72e15e.html</url>
    <content><![CDATA[<p>   作为一个平时不常看日本推理小说，也几乎不会主动找来看的人，了解到这本书完全是通过关于这本书的某同人作品(笑)和同名改编电影。</p>
<span id="more"></span>

<p>  在阅读《脑髓地狱》之前，我先在网络上找到了几篇没有内容雷的感想短文参考，发现这实在是个连剧透都是需要长篇才交待完的故事，再加上作者冗长的叙事手法，导致书中同样的讯息不断重复出现，想要速读时又错过重点，需要返回重读，令不少读者抓狂。</p>
<p>  回到正题，写这篇文章是想要记录阅读了《脑髓地狱》这部被誉为“变格派的杰作”奇书的感觉。有人说看完脑髓地狱犹如自己下了一趟地狱、被故事弄得头昏脑胀、它的文字就是要让人读起来觉得厌恶等等。所有的读后感都指出阅读脑髓地狱并不是那么愉快的经验，但都同样会叫人把书看完(而不是放下书不要阅读它)，并感叹这是一部奇书。另外就是在阅读之前想要稍为了解一下剧情作心理准备的时候，发现那些读后感并不是没有剧透，只不过是瞎子摸象(这本书不只是象，应该是瞎子摸哥斯拉的程度)，根本没能获得任何心理准备的作用。</p>
<p>  但是要问《脑髓地狱》值不值得看，我会说是值得(但我短期都不会看第二遍)。有些故事是儿戏写来玩的，有些故事是很认真严肃的，更有些故事看了会感觉到这个人奉献了自己的生命在文字中，令写作到达一个新境界。《脑髓地狱》就令我有这样的感觉。</p>
<p>  《脑髓地狱》初稿写于1926年，正是精神分析学派的重要人物傅柯的诞生年，出版于1935年，傅柯关于精神病研究的书《疯癫与文明》在25年后才面世。就这方面而言，梦野对于“疯子解放治疗”的理解实在十分超前。 尽管现今从科学看来，他的理论不一定正确(例如胎儿之梦，人类怀胎十月不是因为要发一个比其他物种长的“胎儿之梦”，推翻的例子:长颈鹿怀孕期有16个月)，但他当时能想出来实在是鬼才级的创意。</p>
<p>  另外，我最喜欢的是吴青秀打算画美女变白骨图来向唐太宗进谏，先不论为什么他认为说服唐太宗需要这么恐怖的图画，但梦野能够想到这样的主意实在很疯狂。能够想到都只是还好，但还要写下来其实需要很大的勇气。这样不顾一切的写作我想就是大家明明都没有愉快地阅读到《脑髓地狱》，却又无奈地只能认同它的原因。</p>
<p>  梦野写《脑髓地狱》的笔力犹如他笔下为科学疯狂的两位博士，又像疯狂画家吴青秀，是燃烧生命的艺术，为此我们不得不对梦野予以尊敬。</p>
<p><em>我们人类的精神生活就是，在上述各种心理之中，以最低级、单纯者为中心逐一向外，借由高级复杂的动物心理包裹，最外层再包裹所谓的人皮，用交际、制度、身份家世、面子人格等等蝴蝶结或标签装饰，施加化妆，喷洒香水，然后昂首阔步于马路上。但若是解剖其内容，绝大部分就如前面所述，只是重现潜藏在人体细胞中历代祖先的动物心理记忆。</em></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>输入URL到显示页面的全过程</title>
    <url>/posts/5156546e.html</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">输入 <span class="variable constant_">URL</span> → <span class="variable constant_">DNS</span> 解析 → <span class="variable constant_">TCP</span> 三次握手 → 发送 <span class="variable constant_">HTTP</span> 请求 → 服务器处理响应 →  </span><br><span class="line">浏览器解析 → 构建 <span class="variable constant_">DOM</span>/<span class="variable constant_">CSSOM</span> → 合成渲染树 → 布局与绘制 → <span class="variable constant_">TCP</span> 四次挥手  </span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li><strong>浏览器缓存</strong> → <strong>系统缓存</strong>（hosts文件） → <strong>路由器缓存</strong> → <strong>本地DNS服务器（ISP）</strong> → 若未命中，触发递归查询：<strong>根域名服务器 → 顶级域名服务器（.com） → 权威域名服务器</strong>，最终获取IP地址。</li>
<li><strong>DNS预解析</strong>：通过 <link rel="dns-prefetch"> 提前解析关键域名，加速后续请求。</li>
</ol>
<h3 id="TCP三次握手（传输层）"><a href="#TCP三次握手（传输层）" class="headerlink" title="TCP三次握手（传输层）"></a>TCP三次握手（传输层）</h3><h4 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h4><p>确认双方收发能力，防止历史连接干扰（如过期SYN报文）。</p>
<h4 id="三次步骤"><a href="#三次步骤" class="headerlink" title="三次步骤"></a>三次步骤</h4><p>客户端发送 SYN&#x3D;1 + Seq&#x3D;X → 服务器返回 SYN&#x3D;1 + ACK&#x3D;X+1 + Seq&#x3D;Y → 客户端确认 ACK&#x3D;Y+1。</p>
<h4 id="比喻"><a href="#比喻" class="headerlink" title="比喻"></a>比喻</h4><p>客户端：”我要连你”（SYN） → 服务器：”收到，同意连接”（SYN-ACK） → 客户端：”好的，开始传数据”（ACK）。</p>
<h3 id="HTTP请求与缓存策略（应用层）"><a href="#HTTP请求与缓存策略（应用层）" class="headerlink" title="HTTP请求与缓存策略（应用层）"></a>HTTP请求与缓存策略（应用层）</h3><h4 id="请求阶段"><a href="#请求阶段" class="headerlink" title="请求阶段"></a>请求阶段</h4><ol>
<li>强缓存：通过 HTTP 响应头（Cache-Control属性，或者Expires 属性，过期时间）检查缓存是否在有效期，如果缓存资源有效，无需请求服务器。</li>
<li>协商缓存：当强缓存未命中时，通过向服务器验证资源是否过期，决定是否使用缓存。如果服务器告知资源未改变（304 Not Modified），则浏览器从缓存中读取资源；如果服务器告知资源已改变，则浏览器会下载新资源并更新缓存。</li>
</ol>
<p>强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。</p>
<h4 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a><strong>HTTP 与 HTTPS 的区别</strong></h4><ol>
<li><strong>安全性</strong>：HTTPS 数据通过加密传输，防止被窃听或篡改</li>
<li><strong>端口</strong>：HTTP 默认端口 80，HTTPS 默认端口 443</li>
<li><strong>证书</strong>：HTTPS 需要数字证书，验证服务器身份；HTTP 无需证书</li>
<li><strong>性能</strong>：HTTPS 因加密过程略慢于 HTTP</li>
</ol>
<p><strong>混合加密机制</strong>：</p>
<ol>
<li>访问网站时，浏览器先用非对称加密和服务器协商密钥，再用对称加密传输网页内容</li>
<li><strong>非对称加密</strong>：用于握手阶段交换密钥（<strong>一对密钥</strong>（公钥+私钥）加密和解密，公钥公开，私钥保密，如 RSA 算法），客户端用服务端公钥加密会话密钥</li>
<li><strong>对称加密</strong>：后续数据传输使用对称密钥（加密和解密使用<strong>同一个密钥</strong>，如 AES），加密速度快</li>
</ol>
<h3 id="浏览器解析与渲染（关键步骤）"><a href="#浏览器解析与渲染（关键步骤）" class="headerlink" title="浏览器解析与渲染（关键步骤）"></a>浏览器解析与渲染（关键步骤）</h3><ol>
<li><p>构建DOM树</p>
<p>解析HTML文档，生成树状结构（自动补全未闭合标签）。</p>
</li>
<li><p>构建CSSOM树</p>
<p>解析CSS生成样式规则树，<strong>阻塞渲染</strong>直到CSSOM完成。</p>
</li>
<li><p>合成渲染树</p>
<p>合并DOM与CSSOM为渲染树，过滤不可见节点（如 display: none）。</p>
</li>
<li><p>布局与绘制</p>
<p><strong>布局（Layout）</strong>：计算节点位置与尺寸。</p>
<p><strong>绘制（Painting）</strong>：将渲染树的内容绘制到屏幕。</p>
</li>
</ol>
<h4 id="JS阻塞"><a href="#JS阻塞" class="headerlink" title="JS阻塞"></a>JS阻塞</h4><p>默认阻塞DOM解析，可通过 async（异步加载执行）或 defer（延迟执行）优化。</p>
<ul>
<li>async 是“下载完就执行”。</li>
<li>defer 是“页面渲染完再执行”。</li>
<li>所以，如果脚本无依赖关系，用 async 比较合适。 如果脚本需要在文档完全加载后运行，比如初始化脚本，用 defer 更合适。</li>
<li>如果没有 defer 或 async 时，脚本加载和执行会完全阻塞 HTML 解析，影响页面加载速度</li>
</ul>
<h3 id="TCP四次挥手（传输层）"><a href="#TCP四次挥手（传输层）" class="headerlink" title="TCP四次挥手（传输层）"></a>TCP四次挥手（传输层）</h3><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><ol>
<li>客户端发送 FIN&#x3D;1 → 服务器返回 ACK → 服务器发送 FIN&#x3D;1 → 客户端确认 ACK。</li>
</ol>
<h4 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a>核心逻辑</h4><ol>
<li><strong>TIME_WAIT状态</strong>：客户端等待 2MSL（约60秒），确保服务器收到最终确认，防止残留报文干扰新连接。</li>
</ol>
<h3 id="OSI七层模型映射"><a href="#OSI七层模型映射" class="headerlink" title="OSI七层模型映射"></a>OSI七层模型映射</h3><table>
<thead>
<tr>
<th align="left">流程步骤</th>
<th align="left">对应OSI层</th>
<th align="left">核心协议&#x2F;技术</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DNS解析</td>
<td align="left">应用层</td>
<td align="left">DNS（UDP）</td>
</tr>
<tr>
<td align="left">HTTP请求&#x2F;响应</td>
<td align="left">应用层</td>
<td align="left">HTTP&#x2F;HTTPS</td>
</tr>
<tr>
<td align="left">TCP握手&#x2F;挥手</td>
<td align="left">传输层</td>
<td align="left">TCP</td>
</tr>
<tr>
<td align="left">IP寻址</td>
<td align="left">网络层</td>
<td align="left">IP、ICMP、ARP</td>
</tr>
<tr>
<td align="left">数据帧传输</td>
<td align="left">数据链路层</td>
<td align="left">以太网、Wi-Fi</td>
</tr>
<tr>
<td align="left">物理信号传输</td>
<td align="left">物理层</td>
<td align="left">光纤、电缆</td>
</tr>
</tbody></table>
<h3 id="高频优化点"><a href="#高频优化点" class="headerlink" title="高频优化点"></a>高频优化点</h3><ol>
<li><strong>关键渲染路径优化</strong>：内联关键CSS、延迟非关键JS、预加载关键资源。</li>
<li><strong>TCP性能</strong>：复用连接（HTTP&#x2F;2多路复用）、减少握手次数（Keep-Alive）。</li>
<li><strong>缓存策略</strong>：合理设置 Cache-Control 和 ETag，减少重复请求。</li>
</ol>
<h3 id="总结回答模板"><a href="#总结回答模板" class="headerlink" title="总结回答模板"></a>总结回答模板</h3><p><em>“从输入URL到页面渲染主要经历：</em></p>
<ol>
<li><strong>DNS解析</strong>（本地缓存 → 递归查询IP）；</li>
<li><strong>TCP三次握手</strong>建立可靠连接；</li>
<li><strong>HTTP请求</strong>（强缓存&#x2F;协商缓存）与响应；</li>
<li><strong>浏览器解析</strong>生成DOM&#x2F;CSSOM树 → 合成渲染树 → 布局绘制；</li>
<li><strong>TCP四次挥手</strong>关闭连接。</li>
</ol>
<p><em>优化重点包括：减少DNS查询、复用TCP连接、缓存策略与关键渲染路径优化。”</em></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>邻域均值 202104-2</title>
    <url>/posts/7ca04377.html</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a><strong>题目背景</strong></h2><p>顿顿在学习了数字图像处理后，想要对手上的一副灰度图像进行降噪处理。不过该图像仅在较暗区域有很多噪点，如果贸然对全图进行降噪，会在抹去噪点的同时也模糊了原有图像。因此顿顿打算先使用邻域均值来判断一个像素是否处于较暗区域，然后仅对处于较暗区域的像素进行降噪处理。</p>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>待处理的灰度图像长宽皆为$n$个像素，可以表示为一个$n×n$大小的矩阵A，其中每个元素是一个$[0,L)$范围内的整数，表示对应位置像素的灰度值。<br>对于矩阵中任意一个元素$A_{ij}（0≤i,j&lt;n）$，其邻域定义为附近若干元素的集和：<br>$$<br>Neighbor(i,j,r)&#x3D;{A_{xy}|0≤x,y&lt;n\ and\ |x−i|≤r\ and\ |y−j|≤r}<br>$$<br>这里使用了一个额外的参数$r$来指明$A_{ij}$附近元素的具体范围。根据定义，易知$Neighbor(i,j,r)$最多有$(2r+1)^2$个元素。</p>
<p>如果元素$A_{ij}$邻域中所有元素的平均值小于或等于一个给定的阈值$t$，我们就认为该元素对应位置的像素处于较暗区域。<br>下图给出了两个例子，左侧图像的较暗区域在右侧图像中展示为黑色，其余区域展示为白色。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/202104-2.jpg"></p>
<p>现给定邻域参数r和阈值t，试统计输入灰度图像中有多少像素处于<strong>较暗区域</strong>。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h2><p>输入共$n+1$行。</p>
<p>输入的第一行包含四个用空格分隔的正整数$n、L、r$和$t$，含义如前文所述。</p>
<p>第二到第$n+1$行输入矩阵$A$。<br>第$i+2（0≤i&lt;n）$行包含用空格分隔的$n$个整数，依次为$A_{i0},A_{i1},⋯,A_{i(n−1)}$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h2><p>输出一个整数，表示输入灰度图像中处于较暗区域的像素总数。</p>
<h2 id="样例1输入"><a href="#样例1输入" class="headerlink" title="样例1输入"></a><strong>样例1输入</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 16 1 6</span><br><span class="line">0 1 2 3</span><br><span class="line">4 5 6 7</span><br><span class="line">8 9 10 11</span><br><span class="line">12 13 14 15</span><br></pre></td></tr></table></figure>

<h2 id="样例1输出"><a href="#样例1输出" class="headerlink" title="样例1输出"></a><strong>样例1输出</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h2 id="样例2输入"><a href="#样例2输入" class="headerlink" title="样例2输入"></a><strong>样例2输入</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11 8 2 2</span><br><span class="line">0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 7 0 0 0 7 0 0 7 7 0</span><br><span class="line">7 0 7 0 7 0 7 0 7 0 7</span><br><span class="line">7 0 0 0 7 0 0 0 7 0 7</span><br><span class="line">7 0 0 0 0 7 0 0 7 7 0</span><br><span class="line">7 0 0 0 0 0 7 0 7 0 0</span><br><span class="line">7 0 7 0 7 0 7 0 7 0 0</span><br><span class="line">0 7 0 0 0 7 0 0 7 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure>

<h2 id="样例2输出"><a href="#样例2输出" class="headerlink" title="样例2输出"></a><strong>样例2输出</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">83</span><br></pre></td></tr></table></figure>



<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><p>70%的测试数据满足$n≤100、r≤10$。</p>
<p>全部的测试数据满足$0&lt;n≤600、0&lt;r≤100$且$2≤t&lt;L≤256$。</p>
<h2 id="解答（Dev-CPP-环境）"><a href="#解答（Dev-CPP-环境）" class="headerlink" title="解答（Dev-CPP 环境）"></a>解答（Dev-CPP 环境）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">605</span>][<span class="number">605</span>],sum[<span class="number">605</span>][<span class="number">605</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jmin</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> n,L,r,t;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;L&gt;&gt;r&gt;&gt;t;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			cin&gt;&gt;a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="comment">//存储像素矩阵</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			sum[i][j]=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="comment">//计算像素矩阵前缀和</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">double</span> avg,num;</span><br><span class="line">	<span class="type">int</span> x1,x2,y1,y2;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			x1=<span class="built_in">jmax</span>(<span class="number">1</span>,i-r);</span><br><span class="line">			y1=<span class="built_in">jmax</span>(<span class="number">1</span>,j-r);</span><br><span class="line">			x2=<span class="built_in">jmin</span>(n,i+r);</span><br><span class="line">			y2=<span class="built_in">jmin</span>(n,j+r);</span><br><span class="line">			<span class="comment">// 确定邻域边界点</span></span><br><span class="line"></span><br><span class="line">			num=(x2-x1<span class="number">+1</span>)*(y2-y1<span class="number">+1</span>);</span><br><span class="line">			avg=(sum[x2][y2]-sum[x1<span class="number">-1</span>][y2]-sum[x2][y1<span class="number">-1</span>]+sum[x1<span class="number">-1</span>][y1<span class="number">-1</span>])*<span class="number">1.0</span>/num;</span><br><span class="line">			<span class="keyword">if</span>(avg&lt;=t)&#123;</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>调整最小不平衡子树</title>
    <url>/posts/b2633b2f.html</url>
    <content><![CDATA[<h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p><strong>平衡二叉树（Balanced Binary Tree），简称平衡树（AVL树）——树上任一结点的左子树和右子树的 高度之差不超过1。</strong></p>
<p>结点的平衡因子&#x3D;左子树高-右子树高。</p>
<h3 id="什么是最小不平衡子树？"><a href="#什么是最小不平衡子树？" class="headerlink" title="什么是最小不平衡子树？"></a>什么是最小不平衡子树？</h3><p>往一个<strong>平衡二叉树</strong>（本文中均指“<strong>平衡二叉排序树</strong>”）插入新的叶子节点，从插入点由下往上，依次遍历插入点的各个祖先节点，记录第一个遍历到的 平衡因子|平衡因子|≥2 （即<strong>不平衡</strong>）的祖先节点，以该节点为根节点的子树即为这棵树的<strong>最小不平衡子树</strong>。</p>
<p>根据插入节点在最小不平衡子树中的位置，可以将最小不平衡子树分为<strong>LL、RR、LR、RL</strong>这四类</p>
<span id="more"></span>

<p>在处理问题前，先将最小不平衡子树抽象、简化为以下部分中的几个：</p>
<ol>
<li>最小不平衡子树的根节点A</li>
<li>A的左子树AL（A-Left）</li>
<li>A的右子树AR（A-Right’）</li>
<li>A在插入点对应侧的子节点B</li>
<li>B左子树BL（B-Left）</li>
<li>B右子树BR（B-Right）</li>
<li>插入节点所在的子树Ins（Insert）</li>
</ol>
<h2 id="LL型与RR型"><a href="#LL型与RR型" class="headerlink" title="LL型与RR型"></a>LL型与RR型</h2><h3 id="LL型"><a href="#LL型" class="headerlink" title="LL型"></a>LL型</h3><p>插入点在最小不平衡子树根节点A的<strong>左</strong>孩子B的<strong>左</strong>子树上（不一定要与B直接连接），即Left-Left，记为<strong>LL型</strong></p>
<p><img data-src="https://telegraph-image.pages.dev/file/aa963646ac9cc39de0ffb.png"></p>
<p>对于LL型，将最小不平衡子树<strong>简化</strong>为五个部分：</p>
<ol>
<li>根节点A</li>
<li>A的左孩子节点B</li>
<li>A的右子树AR（A-Right）</li>
<li>插入点Ins（全称Inserted），此时同时也是B的左子树BL（B-Left）</li>
<li>B的右子树BR</li>
</ol>
<p>这里注意无论AL、AR、BL、BR、Ins下有多少个节点，也无论插入的元素在Ins的哪个位置，都抽象成以上几个部分，再处理问题</p>
<p><img data-src="https://telegraph-image.pages.dev/file/02da879217f27764ff499.png"></p>
<p>对于LL型，进行<strong>右旋</strong>，B取代A成为根节点，A当B的<strong>右</strong>孩子（对应<strong>右旋</strong>），A以两个除Ins之外的树为子树（注意两子树的相对左右顺序与旋转前一致），B以Ins树为左子树</p>
<h3 id="RR型"><a href="#RR型" class="headerlink" title="RR型"></a><strong>RR</strong>型</h3><p>插入点在最小不平衡子树根节点A的右孩子B的右子树上（不一定要与B直接连接），即Right-Right，记为<strong>RR</strong>型</p>
<p><img data-src="https://telegraph-image.pages.dev/file/525fff69ec057e3c6a08a.png"></p>
<p>将RR型最小不平衡子树<strong>简化</strong>为五个部分：</p>
<ol>
<li>根节点A</li>
<li>A的右孩子节点B</li>
<li>A的左子树AL</li>
<li>插入点Ins，此时同时也是B的右子树BR</li>
<li>B的左子树BL</li>
</ol>
<p><img data-src="https://telegraph-image.pages.dev/file/6eb29f4cfca47965fa401.png"></p>
<p>对于LL型，进行<strong>左旋</strong>，B取代A成为根节点，A当B的<strong>左</strong>孩子（对应<strong>左旋</strong>），A以两个除Ins之外的树为子树（相对左右顺序与旋转前一致），B以Ins树为右子树</p>
<h2 id="LR型与RL型"><a href="#LR型与RL型" class="headerlink" title="LR型与RL型"></a>LR型与RL型</h2><p>LR型与RL型稍复杂，在简化与抽象时，较前面划分的几个part之外还增加了：</p>
<ol>
<li>插入节点所在子树的父节点C</li>
<li>C节点的左子树CL（C-Left）</li>
<li>C节点的右子树CR（C-Right）</li>
</ol>
<p>LL型与RR型只需要简化成<strong>五个部分</strong>，而LR型与RL型则需要简化成<strong>七个部分</strong></p>
<h3 id="LR型"><a href="#LR型" class="headerlink" title="LR型"></a>LR型</h3><p>插入点在<strong>根节点A</strong>的<strong>左孩子B</strong>的<strong>右子树C</strong>上（不一定要与C直接连接），即Left-Right，记为<strong>LR型</strong></p>
<p><img data-src="https://telegraph-image.pages.dev/file/d53cc2abdd38d35127373.png"></p>
<p><strong>无论Ins是在C的左子树上还是右子树上</strong>，都先把第一步红框中的部分<strong>左旋（Left）</strong>，<strong>C取代B</strong>的位置，以B为左孩子节点，以CR为右孩子，B将以BL为左子树、CL为右子树；</p>
<p>接着把第二步中蓝框的部分<strong>右旋（Right）</strong>，<strong>C取代A</strong>的位置，依然以B为左孩子节点，以A为右孩子节点，A将以CR为左子树、AR为右子树；</p>
<p><img data-src="https://telegraph-image.pages.dev/file/5ea418ce2da051ac5ffd7.png"></p>
<h3 id="RL型"><a href="#RL型" class="headerlink" title="RL型"></a>RL型</h3><p>插入点在<strong>根节点A</strong>的<strong>右孩子B</strong>的<strong>左子树C</strong>上（不一定要与C直接连接），即Right-Left，记为<strong>RL型</strong></p>
<p><img data-src="https://telegraph-image.pages.dev/file/dc3e75781dfbbdd07dd52.png"></p>
<p><strong>无论Ins是在C的左子树上还是右子树上</strong>，都先把第一步红框中的部分右<strong>旋（Right）</strong>，<strong>C取代B</strong>的位置，以B为右孩子节点，以CL为左孩子，B将以BR为右子树、CR为左子树；</p>
<p>接着把第二步中蓝框的部分<strong>左旋（Left）</strong>，<strong>C取代A</strong>的位置，依然以B为右孩子节点，以A为左孩子节点，A将以AL为左子树、CL为右子树；</p>
<h2 id="验算小技巧"><a href="#验算小技巧" class="headerlink" title="验算小技巧"></a>验算小技巧</h2><p>旋转后左右次序不变，调整前夹在两祖宗节点之间的子节点，在调整后依然要夹在两祖宗节点之间</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>王道计算机考研数据结构篇</p>
<p><a href="https://www.zhihu.com/people/jackielics6428">小李的学习笔记</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后快速恢复Hexo环境</title>
    <url>/posts/3d834efa.html</url>
    <content><![CDATA[<p>本方案仅适用于原项目文件夹未被删除的情况，数据无价，做好备份。</p>
<h3 id="一、安装Git与Node-js"><a href="#一、安装Git与Node-js" class="headerlink" title="一、安装Git与Node.js"></a>一、安装Git与Node.js</h3><p>Git for Windows: <a href="https://links.jianshu.com/go?to=https://git-scm.com/">https://git-scm.com/</a><br>Node.js: <a href="https://links.jianshu.com/go?to=https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<span id="more"></span>

<h3 id="二、生成SSH密钥"><a href="#二、生成SSH密钥" class="headerlink" title="二、生成SSH密钥"></a>二、生成SSH密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;这里输入在GitHub的账户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;这里输入在GitHub的注册邮箱名&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;这里输入在 GitHub 的注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>一路回车即可。</p>
<h3 id="三、设置Github的SSH密钥"><a href="#三、设置Github的SSH密钥" class="headerlink" title="三、设置Github的SSH密钥"></a>三、设置Github的SSH密钥</h3><p> <code>C:\Users\主用户\.ssh</code>里有id_rsa和id_rsa.pub两个文件，复制id_rsa.pub的内容。</p>
<p>登录 GitHub 账户，点击右上角个人头像的下拉菜单，依次点击 Settings &gt; SSH and GPG Keys，在 SSH Keys 页面右上角有个<code>New SSH Key</code>按钮，点击该按钮后，粘贴上刚才复制的公钥内容。这样，SSH Key 就配置好了。</p>
<h3 id="四、安装Hexo与相关依赖"><a href="#四、安装Hexo与相关依赖" class="headerlink" title="四、安装Hexo与相关依赖"></a>四、安装Hexo与相关依赖</h3><p>打开项目根目录，Git Bash输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="五、验证"><a href="#五、验证" class="headerlink" title="五、验证"></a>五、验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>如果hexo命令不可用，需要修改系统环境配置。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>风险人群筛查202009-2</title>
    <url>/posts/3a23d7f5.html</url>
    <content><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>某地疫情爆发后，出于“应检尽检”的原则，我们想要通知所有近期经过该高危区域的居民参与核酸检测。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>想要找出经过高危区域的居民，分析位置记录是一种简单有效的方法。</p>
<span id="more"></span>

<p>具体来说，一位居民的位置记录包含$ t $个平面坐标$(x_1,y_1),(x_2,y_2),⋯,(x_t,y_t)$，其中$(x_i,y_i)$ 表示该居民 $i$ 时刻所在位置。<br>高危区域则可以抽象为一个矩形区域（含边界），左下角和右上角的坐标分别为$ (x_l,y_d) $和$ (x_r,y_u)$，满足$x_l&lt;x_r$ 且$y_d&lt;y_u$。</p>
<p>考虑某位居民的位置记录，如果其中某个坐标位于矩形内（含边界），则说明该居民<strong>经过</strong>高危区域；进一步地，如果其中<strong>连续</strong> $k$个或更多坐标均位于矩形内（含边界），则认为该居民曾在高危区域<strong>逗留</strong>。需要注意的是，判定<strong>经过</strong>和<strong>逗留</strong>时我们只关心位置记录中的$ t $个坐标，而无需考虑该居民在$ i $到$ i+1$ 时刻之间位于何处。</p>
<p>给定高危区域的范围和$ n $位居民过去$ t $个时刻的位置记录，试统计其中经过高危区域的人数和曾在高危区域逗留的人数。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共$ n+1 $行。</p>
<p>第一行包含用空格分隔的七个整数$ n、k、t、x_l、y_d、x_r 和 y_u$，含义如上文所述。</p>
<p>接下来 n 行，每行包含用空格分隔的 2t 个整数，按顺序表示一位居民过去$ t $个时刻的位置记录$ (x_1,y_1),(x_2,y_2),⋯,(x_t,y_t)$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共两行，每行一个整数，分别表示经过高危区域的人数和曾在高危区域逗留的人数。</p>
<h2 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">5 2 6 20 40 100 80 </span><br><span class="line">100 80 100 80 100 80 100 80 100 80 100 80 </span><br><span class="line">60 50 60 46 60 42 60 38 60 34 60 30 </span><br><span class="line">10 60 14 62 18 66 22 74 26 86 30 100 </span><br><span class="line">90 31 94 35 98 39 102 43 106 47 110 51 </span><br><span class="line">0 20 4 20 8 20 12 20 16 20 20 20</span><br></pre></td></tr></table></figure>

<h2 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">3 </span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="样例1说明"><a href="#样例1说明" class="headerlink" title="样例1说明"></a>样例1说明</h2><p>如下图红色标记所示，前三条位置记录经过了高危区域；<br>但第三条位置记录（图中左上曲线）只有一个时刻位于高危区域内，不满足逗留条件。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/koukihk/FileHosting/PIC/2020092.png"></p>
<h2 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1 3 8 0 0 10 10 </span><br><span class="line">-1 -1 0 0 0 0 -1 -1 0 0 -1 -1 0 0 0 0</span><br></pre></td></tr></table></figure>

<h2 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="样例2说明"><a href="#样例2说明" class="headerlink" title="样例2说明"></a>样例2说明</h2><p>该位置记录经过了高危区域，但最多只有连续两个时刻位于其中，不满足逗留条件。</p>
<h2 id="解答（Dev-CPP环境）"><a href="#解答（Dev-CPP环境）" class="headerlink" title="解答（Dev-CPP环境）"></a>解答（Dev-CPP环境）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">	<span class="type">int</span> pass;</span><br><span class="line">	<span class="type">int</span> stay;</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">int</span> pass,<span class="type">int</span> stay)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;pass=pass;</span><br><span class="line">		<span class="keyword">this</span>-&gt;stay=stay;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k,t,xl,yd,xr,yu,cnt;</span><br><span class="line">	<span class="type">int</span> xt,yt,flag1,flag2;</span><br><span class="line">	<span class="type">int</span> sump=<span class="number">0</span>,sums=<span class="number">0</span>;</span><br><span class="line">	vector&lt;Point&gt; points;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k&gt;&gt;t&gt;&gt;xl&gt;&gt;yd&gt;&gt;xr&gt;&gt;yu;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;flag1=<span class="number">0</span>;flag2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;t;j++)&#123;</span><br><span class="line">			cin&gt;&gt;xt&gt;&gt;yt;</span><br><span class="line">			<span class="keyword">if</span>(xt&gt;=xl&amp;&amp;xt&lt;=xr&amp;&amp;yt&gt;=yd&amp;&amp;yt&lt;=yu)&#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				<span class="keyword">if</span>(flag1==<span class="number">0</span>) flag1=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(flag2==<span class="number">0</span>&amp;&amp;cnt==k) flag2=<span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				cnt=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag2==<span class="number">1</span>)&#123;</span><br><span class="line">			points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag1==<span class="number">1</span>)&#123;</span><br><span class="line">			points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(points[i].pass==<span class="number">1</span>)&#123;</span><br><span class="line">			sump++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(points[i].stay==<span class="number">1</span>)&#123;</span><br><span class="line">			sums++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;sump&lt;&lt;endl&lt;&lt;sums&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>试题</category>
      </categories>
      <tags>
        <tag>csp</tag>
      </tags>
  </entry>
</search>
